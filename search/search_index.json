{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About cmf-cli","text":"<p><code>@criticalmanufacturing/cli</code> (aka cmf-cli) is a Command Line Interface used for Critical Manufacturing MES custom developments.</p>"},{"location":"#use-cmf-cli-to","title":"Use cmf-cli to . . .","text":"<ul> <li>Scaffold a new repository</li> <li>Generate new package structures</li> <li>Adapt packages of code for Critical Manufacturing MES</li> <li>Manage multiple versions of packages and package dependencies</li> <li>Create packages that can be used by any developer or customer</li> <li>View the package tree</li> <li>Restore packages for local development</li> <li>Assemble a release bundle</li> </ul> <p>and a lot more!</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>To get started with cmf-cli, you need to use the command line interface (CLI) to install cmf-cli. We look forward to seeing what you create!</p>"},{"location":"01-install/","title":"CLI Installation","text":"<p>This tutorial guides you through installing <code>@criticalmanufacturing/cli</code>, including prerequisites, installation steps, and validation.</p>"},{"location":"01-install/#1-prerequisites","title":"1. Prerequisites","text":""},{"location":"01-install/#nodejs-and-npm","title":"Node.js and NPM","text":"<p>Before you begin, ensure you have the following software installed:</p> <ul> <li>Node.js;</li> <li>NPM command line interface.</li> </ul>"},{"location":"01-install/#nodejs-version-compatibility","title":"Node.js Version Compatibility","text":"<p><code>@criticalmanufacturing/cli</code> works with the latest Node.js version. However, specific scaffolding commands require compatibility with your target CM MES version:</p> CM MES Version Required Node.js Version Required NPM Version v8.x or v9.x v12.x (Erbium) v6.x v10.x v18.x (Hydrogen) v9.x v11.x or later v20.x (Iron) or later v10.x or later"},{"location":"01-install/#installing-nodejs-and-npm","title":"Installing Node.js and NPM","text":"<p>Use NVM</p> <p>Use a Node version manager like nvm to install Node.js and NPM.</p> <p>Avoid the usage of Node installer, since it usually installs npm in a directory with local permissions, which may cause permissions errors when you run npm packages globally.</p> <p>To perform the checks or install Node.js and NPM dependencies:</p> <ol> <li>Adapt the following PowerShell script;</li> <li> <p>Run it on a command line with administration privileges.</p> <pre><code>#SET TARGET MES MAJOR VERSION (8, 9, 10 or 11)\n$mesMajorVersion = 11\n\n#Map MES to node version\n$nodeMajorVerion = switch ($mesMajorVersion)\n{\n    8  { \"12\" }\n    9  { \"12\" }\n    10 { \"18\" }\n    11 { \"20\" }\n}\n\n# To check installed versions of Node.js and NPM use:\nnvm list\n\n# If not found, install them\nnvm install $nodeMajorVerion \n\n#Determine the installed version\n$newNodeVersion = nvm list \n$newNodeVersion = $newNodeVersion | where-object { $_ -Match \"\\s$nodeMajorVersion\\.\" } | Select-Object -First 1\n$newNodeVersion = ($newNodeVersion | Select-String -Pattern \"\\d+\\.\\d+\\.\\d+\").Matches.Value\n\n# Set appropriate node version as active\nnvm use $newNodeVersion\n\n# Check the active node.js version\nnode -v\n\n# Check the active NPM version\nnpm -v\n</code></pre> </li> </ol>"},{"location":"01-install/#iot-driver-dependencies-optional","title":"IoT Driver Dependencies (Optional)","text":"<p>The development of IoT drivers on Critical Manufacturing MES has a dependency for the node-gyp NPM package. As so, if your project requires the development of custom driver, ensure that your dev/build environment has its dependencies previously installed (check its GitHub Page for details).</p>"},{"location":"01-install/#2-install-cli","title":"2. Install CLI","text":"<ol> <li>Open a command line with administration privileges.</li> <li> <p>Execute the command:</p> <pre><code>npm install -g @criticalmanufacturing/cli\n</code></pre> </li> </ol>"},{"location":"01-install/#3-validate","title":"3. Validate","text":"<ol> <li>Open a command prompt.</li> <li> <p>Run the following command to verify the installation:</p> <pre><code>cmf -v\n</code></pre> </li> </ol> <p>This command should output the installed version of <code>@criticalmanufacturing/cli</code> if successful.</p>"},{"location":"02-learn/","title":"Learn","text":"<p>To learn how to use Critical Manufacturing CLI we recommend reading the following information:</p> <ul> <li> <p>Tutorials  A practical and quick overview of its usage in the daily life of an MES developer.</p> </li> <li> <p>Concepts   Explanation of the concepts used by the CLI.</p> </li> <li> <p>Help   An overview on how to use the CLI help.</p> </li> <li> <p>Migration   An overview of topics to consider when upgrading the CLI.</p> </li> </ul>"},{"location":"02-learn/concepts/","title":"Concepts","text":"<p>This section lays the foundation for your @criticalmanufacturing/cli journey by introducing key concepts you will encounter throughout the process.</p> <ul> <li> <p>Understanding Project Types   Explore the different project types supported by CM CLI in   Project Types. This will help you   choose the most suitable structure for your MES customization   needs.</p> </li> <li> <p>Project Scaffolding Options   Delve into the available project scaffold configurations in   Project Scaffold. Learn how to   establish the optimal structure for your project, whether it's a   simple, monolithic setup or a more complex, feature-driven   approach.</p> </li> <li> <p>Demystifying Layer Packages   Uncover the various MES package types you can utilize to build your customizations. Layer Packages provides a comprehensive overview of these packages and their functionalities.</p> </li> <li> <p>Streamlining Your Release Process   While Release Process page showcases the   internal release process used by CM Teams, it serves as a valuable starting   point for building your own customized workflow. Adapt the recommendations   and integrate them with your preferred CI/CD tools for smooth deployment.</p> </li> </ul> <p>By mastering these core concepts, you will be equipped to leverage the power of CM CLI on your MES customization projects.</p>"},{"location":"02-learn/concepts/layers-packages/","title":"Layers packages","text":"<p>The CM MES architecture is composed of various system layers highly customizable.</p> <p>This page provides an overview of the various layers packages available for customizing MES projects, that can be created using the CM CLI. Each layer package serves a specific purpose and offers a structured approach for managing your customizations.</p>"},{"location":"02-learn/concepts/layers-packages/#cmf-init","title":"<code>cmf init</code>","text":"<p>Before creating layers packages, ensure you have initialized your project using the <code>cmf init</code> command. This command defines the project's unique name based on the specified TENANT name specified on the environment settings file. This name will be used throughout your layers packages for consistent identification.</p>"},{"location":"02-learn/concepts/layers-packages/#mes-customization","title":"MES Customization","text":"<p>Learn more about CM MES extensibility points in the Critical Manufacturing Developer Portal: https://developer.criticalmanufacturing.com.</p>"},{"location":"02-learn/concepts/layers-packages/#layers-packages-explained","title":"Layers Packages Explained","text":"<p>Each layer package focuses on a specific aspect of your customization.</p>"},{"location":"02-learn/concepts/layers-packages/#1-business","title":"1. Business","text":"<p>This package provides a .NET solution for backend development, including:</p> <ul> <li>Exposing new REST API services;</li> <li>Extending orchestration and business logic used by API services or DEE actions;</li> </ul>"},{"location":"02-learn/concepts/layers-packages/#scaffolding","title":"Scaffolding","text":"<p>To generate a Business package use the command:</p> <pre><code>cmf new business\n</code></pre>"},{"location":"02-learn/concepts/layers-packages/#package-structure","title":"Package Structure","text":"<p>The created package is composed of three .NET projects:</p> <ul> <li>Common - Stores constants, utilities, and other reusable classes.</li> <li>Orchestration - Houses custom business contracts, logic, and IOC configuration.</li> <li>Services - Defines custom REST API services to be consumed by the UI or   other MES Rest API client.</li> </ul> <pre><code>\ud83d\udce6Project\n \u2523 ...\n \u2523 \ud83d\udcc2Cmf.Custom.Business\n \u2503 \u2523 \ud83d\udcc2Cmf.Custom.Common                 # Common Project \n \u2503 \u2503 \u2523 \ud83d\udcdcCmf.Custom.{{TENANT}}.Common.csproj\n \u2503 \u2503 \u2523 \ud83d\udcdc{{TENANT}}Constants.cs\n \u2503 \u2503 \u2517 \ud83d\udcdc{{TENANT}}Utilities.cs\n \u2503 \u2523 \ud83d\udcc2Cmf.Custom.Orchestration          # Orchestration Project\n \u2503 \u2503 \u2523 \ud83d\udcc2Abstractions\n \u2503 \u2503 \u2503 \u2517 \ud83d\udcdcI{{TENANT}}Orchestration.cs \n \u2503 \u2503 \u2523 \ud83d\udcc2InputObjects\n \u2503 \u2503 \u2523 \ud83d\udcc2OutputObjects\n \u2503 \u2503 \u2523 \ud83d\udcdcCmf.Custom.{{TENANT}}.Orchestration.csproj\n \u2503 \u2503 \u2523 \ud83d\udcdc{{TENANT}}Orchestration.cs\n \u2503 \u2503 \u2517 \ud83d\udcdcOrchestrationStartupModule.cs\n \u2503 \u2523 \ud83d\udcc2Cmf.Custom.Services               # REST Services Project\n \u2503 \u2503 \u2523 \ud83d\udcdcCmf.Custom.{{TENANT}}.Services.csproj \n \u2503 \u2503 \u2517 \ud83d\udcdc{{TENANT}}Controller.cs            \n \u2503 \u2523 \ud83d\udcdcBusiness.sln\n \u2503 \u2517 \ud83d\udcdccmfpackage.json\n \u2523 ...\n</code></pre>"},{"location":"02-learn/concepts/layers-packages/#2-master-data","title":"2. Master Data","text":"<p>This package allows you to load or update:</p> <ul> <li>Exported Objects (e.g., UI pages, queries);</li> <li>Process Rules (DEE actions executed during package installation);</li> <li>Master Data (system and/or business entity data).</li> </ul>"},{"location":"02-learn/concepts/layers-packages/#scaffolding_1","title":"Scaffolding","text":"<p>To generate the Master Data package use the command:</p> <pre><code>cmf new data --businessPackage .\\Cmf.Custom.Business\\\n</code></pre> <p>Note</p> <p>The association of \"Data\" package with \"Business\" package, results in a change in the \"Business\" .NET solution file, to include the \"Actions\" .NET project. This improves the developer's experience, as he will be able to edit all .NET code in the same integrated environment.</p>"},{"location":"02-learn/concepts/layers-packages/#package-structure_1","title":"Package Structure","text":"<p>The Master Data package structure includes folders for:</p> <ul> <li>DEEs: Stores logic for Process Rules (executed during installation) and DEE Actions (executed by DEE extension points on the MES backend logic).</li> <li>ExportedObjects: Contains objects (e.g., UI pages, queries) to be created or updated.</li> <li>MasterData: Holds system and/or business entity data for updates.</li> </ul> <pre><code>\ud83d\udce6Project\n \u2523 ...\n \u2523 \ud83d\udcc2Cmf.Custom.Data\n \u2503 \u2523 \ud83d\udcc2DEEs             # Folder to store DEE Actions / Process Rules\n \u2503 \u2503 \u2523 \ud83d\udcc2ProcessRules   \n \u2503 \u2503 \u2503 \u2523 \ud83d\udcc21.0.0\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2After                \n \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcdc...      # Process rules for v1.0.0 release to be executed after\n \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcc2Before\n \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcdc...      # Process rules to run on v1.0.0 installation before host restart\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2EntityTypes\n \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcdc...        # Process rules to create/change MES entities/tables\n \u2503 \u2503 \u2503 \u2517 \ud83d\udcdcreadme.md\n \u2503 \u2503 \u2523 \ud83d\udcdc.cmfpackageignore\n \u2503 \u2503 \u2523 \ud83d\udcdcCmf.Custom.{{TENANT}}.Actions.csproj\n \u2503 \u2503 \u2517 \ud83d\udcdcDeeDevBase.cs\n \u2503 \u2523 \ud83d\udcc2ExportedObjects\n \u2503 \u2503 \u2517 \ud83d\udcc21.0.0\n \u2503 \u2503 \u2503 \u2517 \ud83d\udcdc...          # Exported objects to be created/updated on v1.0.0 installation\n \u2503 \u2523 \ud83d\udcc2MasterData\n \u2503 \u2503 \u2523 \ud83d\udcc21.0.0\n \u2503 \u2503 \u2503 \u2517 \ud83d\udcdc...          # Exported objects to be created/updated on v1.0.0 installation\n \u2503 \u2503 \u2517 \ud83d\udcdcreadme.md\n \u2503 \u2517 \ud83d\udcdccmfpackage.json\n \u2523 ...\n</code></pre> <p>Note</p> <p>Inspect the package <code>cmfpackage.json</code> file contents to understand:</p> <ul> <li>The expected location for files used on a Master Data package;</li> <li>How to extend the package build behavior.</li> </ul>"},{"location":"02-learn/concepts/layers-packages/#3-ui","title":"3. UI","text":"<p>This layer consists of two sub-packages for extending the MES UI:</p> <ul> <li>HTML - Allows customization of existing MES UI pages, controls, routes and   creation of new controls, pages, or wizards.</li> <li>Help - Enables adding documentation entries to the MES Help system to   explain your customizations.</li> </ul>"},{"location":"02-learn/concepts/layers-packages/#scaffolding_2","title":"Scaffolding","text":"<p>The commands for generating UI packages depends on your MES version:</p> MES v10 or aboveMES v9 or below <pre><code># HTML\ncmf new html\n\n# HELP\ncmf new help\n</code></pre> <p>To scaffold HTML and Help, their Deployment Framework package needs to be specified. These files can be found in the MES ISO/disk. Assuming that ISO is mounted on <code>H:</code> drive and MES target version is 9.1.8, use the commands:</p> <pre><code>#HTML\ncmf new html --htmlPackage H:\\packages\\Cmf.Presentation.HTML.9.1.8.zip\n\n#HELP\ncmf new help --documentationPackage H:\\packages\\Cmf.Documentation.9.1.8.zip\n</code></pre>"},{"location":"02-learn/concepts/layers-packages/#package-structure_2","title":"Package Structure","text":"<p>The resulting file structure depends on the MES version. For details on its usage check CM Training Presentation Training Courses or the Developer Portal.</p> <p>NPM Authentication</p> <p>To authenticate with the NPM registry, you'll need to add your authentication information to your <code>.npmrc</code> file. This file is located at <code>%USERPROFILE%/.npmrc</code> on Windows and <code>~/.npmrc</code> on Linux.  The Critical Manufacturing Developer Portal provides instructions on how to configure and use our public NuGet, NPM, and Docker repositories.</p>"},{"location":"02-learn/concepts/layers-packages/#4-iot","title":"4. IoT","text":"<p>This package facilitates developing custom IoT tasks and converters. It also includes a structure for managing IoT Workflows and MasterData under source control.</p>"},{"location":"02-learn/concepts/layers-packages/#scaffolding_3","title":"Scaffolding","text":"<p>The command for generating IoT packages depends on your MES version. For full details on how to generate an IoT package library check the IoT Scaffolding Guide.</p> MES v11 onwardsMES v10up to MES v9 <p>To generate IoT package with support for Automation Task Library (ATL), use:</p> <pre><code>cmf new iot\n</code></pre> <p>In alternative, although deprecated, you can sill generate a Tasks Package Library, using the \"MES v10\" command.</p> <pre><code>cmf new iot --htmlPackageLocation Cmf.Custom.Baseline.HTML --isAngularPackage\n</code></pre> <pre><code>cmf new iot\n</code></pre>"},{"location":"02-learn/concepts/layers-packages/#package-structure_3","title":"Package Structure","text":"<p>The generated package includes sub-packages for:</p> <ul> <li>IoT.Data: Stores IoT-specific MasterData.</li> <li>IoT.Packages: Stores custom tasks and converters implementation.</li> </ul> <pre><code>\ud83d\udce6Project\n \u2523 ...\n \u2523 \ud83d\udcc2Cmf.Custom.IoT\n \u2503 \u2523 \ud83d\udcc2Cmf.Custom.IoT.Data\n \u2503 \u2503 \u2523 \ud83d\udcc2AutomationWorkFlows\n \u2503 \u2503 \u2503 \u2517 \ud83d\udcdc...                  # Exported Workflows files\n \u2503 \u2503 \u2523 \ud83d\udcc2MasterData\n \u2503 \u2503 \u2503 \u2517 \ud83d\udcc21.0.0\n \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcdc...                # IoT MasterData files\n \u2503 \u2503 \u2517 \ud83d\udcdccmfpackage.json\n \u2503 \u2523 \ud83d\udcc2Cmf.Custom.IoT.Packages\n \u2503 \u2503 \u2523 \ud83d\udcc2src\n \u2503 \u2503 \u2503 \u2517 \ud83d\udcdc...                  # Location for Custom Tasks and Converters code\n \u2503 \u2503 \u2523 \ud83d\udcdccmfpackage.json\n \u2503 \u2517 \ud83d\udcdccmfpackage.json\n \u2523 \ud83d\udcc2...\n</code></pre>"},{"location":"02-learn/concepts/layers-packages/#5-database","title":"5. Database","text":"<p>This package allows creating scripts for execution on MES databases during installation.</p>"},{"location":"02-learn/concepts/layers-packages/#scaffolding_4","title":"Scaffolding","text":"<p>To create a Database package use the command:</p> <pre><code>cmf new database\n</code></pre>"},{"location":"02-learn/concepts/layers-packages/#package-structure_4","title":"Package Structure","text":"<p>The created package includes sub-packages for scripts to be executed:</p> <ul> <li>Pre: Before MES Host restart.</li> <li>Post: After MES Host restart.</li> </ul> <p>Each sub-package further contains folders for specific MES databases (ONLINE, ODS, DWH) to store relevant SQL scripts.</p> <pre><code>\ud83d\udce6Project\n \u2523 ...\n \u2523 \ud83d\udcc2Cmf.Custom.Database\n \u2503 \u2523 \ud83d\udcc2Post\n \u2503 \u2503 \u2523 \ud83d\udcc2DWH\n \u2503 \u2503 \u2523 \ud83d\udcc2ODS\n \u2503 \u2503 \u2523 \ud83d\udcc2ONLINE\n \u2503 \u2503 \u2517 \ud83d\udcdccmfpackage.json\n \u2503 \u2523 \ud83d\udcc2Pre\n \u2503 \u2503 \u2523 \ud83d\udcc2DWH\n \u2503 \u2503 \u2523 \ud83d\udcc2ODS\n \u2503 \u2503 \u2523 \ud83d\udcc2ONLINE\n \u2503 \u2503 \u2517 \ud83d\udcdccmfpackage.json\n \u2523 ...\n</code></pre>"},{"location":"02-learn/concepts/layers-packages/#6-tests","title":"6. Tests","text":"<p>The Tests package provides a framework for creating regression tests to ensure the quality and reliability of your MES customization project. It utilizes the .NET MsTests framework to define and execute test cases.</p> <p>While the Tests package follows the same structure and creation process as other layer packages, it is not installable as part of the MES system. It is primarily used for internal development and testing purposes.</p> <p>The package includes dedicated folders for different test types (e.g., Biz, GUI, IoT) and provides necessary configuration files for test execution.</p>"},{"location":"02-learn/concepts/layers-packages/#scaffolding_5","title":"Scaffolding","text":"<p>To create a Tests package use the command:</p> <pre><code>cmf new test\n</code></pre>"},{"location":"02-learn/concepts/layers-packages/#package-structure_5","title":"Package Structure","text":"<p>The created package structure incorporates folders for various test categories:</p> <ul> <li>Tests.Biz: Contains project files for Business logic (BE) tests.</li> <li>Tests.Biz.Common: Houses project files for commonly used functionalities across tests.</li> <li>Tests.GUI: Includes project files for Graphical User Interface (GUI) tests.</li> <li>Tests.GUI.PageObjects: Provides project files for defining objects to interact with GUI functionalities during testing.</li> <li>Tests.IoT: Encompasses project files for Internet of Things (IoT) specific tests.</li> <li>MasterData: This folder serves as a repository to store test master data. This data is used to set up the MES environment before actual test execution.</li> </ul> <pre><code> \ud83d\udce6Project\n \u2523 ...\n \u2523 \ud83d\udcc2Cmf.Custom.Tests\n \u2503 \u2523 \ud83d\udcc2Cmf.Custom.Tests.Biz\n \u2503 \u2503 \u2523 \ud83d\udcdcCmf.Custom.Tests.Biz.csproj        #== BE Tests Project\n \u2503 \u2523 \ud83d\udcc2Cmf.Custom.Tests.Biz.Common\n \u2503 \u2503 \u2517 \ud83d\udcdcCmf.Custom.Tests.Biz.Common.csproj #== Common Functions Project\n \u2503 \u2523 \ud83d\udcc2Cmf.Custom.Tests.GUI\n \u2503 \u2503 \u2523 \ud83d\udcdcCmf.Custom.Tests.GUI.csproj        #== GUI Tests Project\n \u2503 \u2523 \ud83d\udcc2Cmf.Custom.Tests.GUI.PageObjects\n \u2503 \u2503 \u2517 \ud83d\udcdcCmf.Custom.Tests.GUI.PageObjects.csproj\n \u2503 \u2523 \ud83d\udcc2Cmf.Custom.Tests.IoT\n \u2503 \u2503 \u2523 \ud83d\udcc2Framework\n \u2503 \u2503 \u2523 \ud83d\udcc2Tests\n \u2503 \u2503 \u2523 \ud83d\udcdcCmf.Custom.Tests.IoT.csproj        #== IoT Tests Project\n \u2503 \u2523 \ud83d\udcc2MasterData\n \u2503 \u2503 \u2523 \ud83d\udcc2Files                 #== Master Data for Test Environment\n \u2503 \u2503 \u2517 \ud83d\udcdccmfpackage.json\n \u2503 \u2523 \ud83d\udcdcapp.config\n \u2503 \u2523 \ud83d\udcdccmfpackage.json\n \u2503 \u2523 \ud83d\udcdcintegration.runsettings\n \u2503 \u2523 \ud83d\udcdclocal.runsettings\n \u2503 \u2517 \ud83d\udcdcTests.sln\n \u2523 ...\n</code></pre>"},{"location":"02-learn/concepts/layers-packages/#7-reporting","title":"7. Reporting","text":"<p>This package layer allows the installation of additional SQL ServerReporting Services (SSRS) reports to the MES.</p>"},{"location":"02-learn/concepts/layers-packages/#scaffolding_6","title":"Scaffolding","text":"<p>To create a Reporting package use the command:</p> <pre><code>cmf new reporting\n</code></pre>"},{"location":"02-learn/concepts/layers-packages/#package-structure_6","title":"Package Structure","text":"<p>The created package structure incorporates folders to store RDL files that will be installed on the MES SSRS folder.</p> <pre><code> \ud83d\udce6Project\n \u2523 ...\n \u2523 \ud83d\udcc2Cmf.Custom.Reporting\n \u2503 \u2523 \ud83d\udcc21.0.0\n \u2503 \u2503 \u2517 \ud83d\udcc2Custom           # SRSS folder to store the reporting services\n \u2503 \u2517 \ud83d\udcdccmfpackage.json\n \u2523 ...\n</code></pre>"},{"location":"02-learn/concepts/layers-packages/#8-grafana","title":"8. Grafana","text":"<p>This package layer allows you to create/update <code>grafana</code> dashboards in the MES infrastructure (only applicable to environments running in containers with MES v10 or above).</p>"},{"location":"02-learn/concepts/layers-packages/#scaffolding_7","title":"Scaffolding","text":"<p>To create a Grafana package use the command:</p> <pre><code>cmf new grafana\n</code></pre>"},{"location":"02-learn/concepts/layers-packages/#package-structure_7","title":"Package Structure","text":"<p>The created package structure incorporates folders to store grafana dashboards and data sources.</p> <pre><code> \ud83d\udce6Project\n \u2523 ...\n \u2523 \ud83d\udcc2Cmf.Custom.Grafana\n \u2503 \u2523 \ud83d\udcc21.0.0\n \u2503 \u2503 \u2523 \ud83d\udcc2dashboards\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2{{TENANT}}\n \u2503 \u2503 \u2503 \u2517 \ud83d\udcdcdashboards.yaml\n \u2503 \u2503 \u2517 \ud83d\udcc2datasources\n \u2503 \u2503 \u2503 \u2517 \ud83d\udcdcdatasources.yaml\n \u2503 \u2523 \ud83d\udcdccmfpackage.json\n \u2503 \u2517 \ud83d\udcdcREADME.md\n \u2523 ...\n</code></pre>"},{"location":"02-learn/concepts/layers-packages/#9-securityportal","title":"9. SecurityPortal","text":"<p>This package layer allows the configuration of authentication strategies on the MES Security Portal component.</p> <p>Prefer Usage of DevOps Center</p> <p>Whenever possible security strategies should be defined through CM DevOps Center. Use this package, only if, your strategy cannot be defined there or the target environment is not running on containers.</p>"},{"location":"02-learn/concepts/layers-packages/#scaffolding_8","title":"Scaffolding","text":"<p>To create a SecurityPortal package use the command:</p> <pre><code>cmf new securityportal\n</code></pre>"},{"location":"02-learn/concepts/layers-packages/#package-structure_8","title":"Package Structure","text":"<p>This is a simple package. Use the <code>config.json</code> file to define the additional security settings/strategies for the CM MES Security Portal component.</p> <pre><code> \ud83d\udce6Project\n \u2523 ...\n \u2523 \ud83d\udcc2Cmf.Custom.SecurityPortal\n \u2503 \u2523 \ud83d\udcdccmfpackage.json\n \u2503 \u2517 \ud83d\udcdcconfig.json\n \u2523 ...\n</code></pre>"},{"location":"02-learn/concepts/layers-packages/#deprecated-layer-packages","title":"Deprecated layer packages","text":""},{"location":"02-learn/concepts/layers-packages/#exported-objects","title":"Exported Objects","text":"<p>Even though the CLI does not provide scaffolding for an <code>ExportedObjects</code> package, as it generally is better to include these in Master Data packages, it is possible to create such a package and the tool will pack it as with any other package type.</p> <p>As an example, an ExportedObjects package manifest looks like this:</p> <pre><code>{\n  \"packageId\": \"Cmf.Custom.Baseline.ExportedObjects\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Baseline Exported Objects Package\",\n  \"packageType\": \"ExportedObjects\",\n  \"isInstallable\": true,\n  \"isUniqueInstall\": false,\n  \"contentToPack\": [\n    {\n      \"source\": \"$(version)/*\",\n      \"target\": \"ExportedObjects\"\n    }\n  ]\n}\n</code></pre> <p>You would create a <code>cmfpackage.json</code> file inside the objects folder with this content. This will pack any XML file in a folder named after the current package version, so in this case <code>1.0.0</code> and place it in the package file in an <code>ExportedObjects</code> folder.</p> <p>Afterwards, do not forget to add this new package as a dependency of your root/feature package, to make sure it gets installed when required.</p>"},{"location":"02-learn/concepts/project-scaffold/","title":"Project Scaffolding","text":"<p>The CM CLI offers two primary structures for customizing your project: Traditional and Feature-Driven. Choosing the right approach depends on your project's complexity and organizational structure.</p>"},{"location":"02-learn/concepts/project-scaffold/#strategy-1-traditional-scaffold","title":"Strategy 1: Traditional Scaffold","text":"<p>Best for: Simple projects with a single team targeting one or more sites with identical customizations.</p> <p>This structure organizes your project into distinct layer packages:</p> <ul> <li>Business: Backend business logic.</li> <li>Database: Database schema and scripts.</li> <li>Data: Master data, DEEs and other exported objects.</li> <li>Grafana (containers only): Dashboards and monitoring configurations.</li> <li>UI (HTML and Help): User interface and documentation.</li> <li>IoT: Integrations with Internet of Things devices.</li> <li>Reporting (for SQL Server Reporting Services): Reporting components.</li> <li>Tests: Unit and integration tests.</li> </ul> <p>Each layer is deployed as a separate package, allowing for granular deployments and minimizing disruption to unchanged components. This is particularly useful for agile development, where only modified layers are deployed during each sprint.</p> <p>For more details on each package layer, see the Layer Packages Concept page.</p> <p>Key Packages</p> <p>The Business, UI (HTML), Help, and Data (Master Data) packages are commonly used in customization projects.</p>"},{"location":"02-learn/concepts/project-scaffold/#demo-traditional-scaffolding","title":"Demo: Traditional Scaffolding","text":"<p>This demo showcases the initial setup for a typical traditional project. Early sprints often focus on data modeling, making the Data package crucial. A Test package is also essential from the start. The Business package might be initialized early to enable compilation and validation of Process Rules within the Data package.</p> <p></p>"},{"location":"02-learn/concepts/project-scaffold/#strategy-2-feature-driven-scaffold","title":"Strategy 2: Feature-Driven Scaffold","text":"<p>Best for: Complex projects with multiple teams, multiple sites, or shared features with site-specific variations.</p> <p>This approach organizes projects around features, promoting modularity, flexibility, and scalability. Two common arrangements are:</p> <ul> <li>Feature Packages: Self-contained packages focused on specific features.</li> <li>Layered Projects: A hierarchical structure where site-specific packages depend on a Core/Baseline package.</li> </ul> <p>Limitations</p> <ul> <li>Test solutions reside at the repository root (no feature-level testing).</li> <li>Traditional and feature-driven packages cannot be mixed within the same repository.</li> <li>Feature packages must reside within a repository project folder.</li> </ul> <p>The <code>cmf new</code> command facilitates the creation of these packages, but with some constraints:</p> <ul> <li>The test solution remains at the repository root; feature-level testing is not supported.</li> <li>Traditional packages (at the repository root) cannot coexist with feature-driven packages.</li> <li>Feature packages must be placed within a designated project folder within the repository.</li> </ul> <p>Automatic Dependency Registration</p> <p>The <code>cmf new</code> command automatically registers package dependencies based on the folder structure.</p>"},{"location":"02-learn/concepts/project-scaffold/#repository-organization-for-feature-driven-projects","title":"Repository Organization for Feature-Driven Projects","text":"<p>Feature-driven projects often benefit from a multi-repository structure, e.g.:</p> <ul> <li><code>Repo_Common</code>: Enterprise-wide MES features (industry-agnostic).</li> <li><code>Repo_Medical_Equipment_01</code>: Features specific to medical equipment sites, potentially reusing features from <code>Repo_Common</code>.</li> <li><code>Repo_Medical_Drugs_01</code>: Features specific to medical drug sites, potentially reusing features from <code>Repo_Common</code>.</li> <li><code>Repo_SemiConductors_01</code>: Features specific to semiconductor sites, potentially reusing features from <code>Repo_Common</code>.</li> <li><code>Repo_Site_Medical_01</code>: Medical site-specific customizations, combining features from relevant repositories.</li> <li><code>Repo_Site_Medical_02</code>: Another medical site-specific repository.</li> <li><code>Repo_Site_Semi_01</code>: A site-specific repository for semiconductors.</li> </ul> <p>This structure allows for clear separation of concerns and independent management of features. If a feature requires complete isolation (including its tests), consider moving it to a separate repository and refactoring existing repositories as needed.</p>"},{"location":"02-learn/concepts/project-scaffold/#demo-feature-driven-scaffolding","title":"Demo: Feature-Driven Scaffolding","text":"<p>A Feature Package is a \"meta-package\" containing one or more layer packages (e.g., a Feature package might contain only a Business package). Ideally, a Feature package includes all necessary layer packages (Business, UI, Help, etc.) for the feature to function.</p> <p>Creating a Feature Package:</p> <p>Use the <code>cmf new feature</code> command at the repository root:</p> <pre><code>cmf new feature Cmf.Custom.Baseline\n</code></pre> <p>This creates the <code>Cmf.Custom.Baseline</code> feature package in the <code>Features\\Cmf.Custom.Baseline</code> directory.</p> <p>Creating Layer Packages within a Feature:</p> <p>After creating a feature, you cannot create layer packages directly in the repository root. You must navigate to the feature's directory:</p> <pre><code>cd Features/Cmf.Custom.Baseline\ncmf new business  # Creates the Business package for the Baseline feature\ncmf new html      # Creates the HTML package for the Baseline Feature\n</code></pre> <p>Attempting to create a root-level layer package after creating features will result in an error:</p> <pre><code>cmf new html\n</code></pre> <pre><code>Cannot create a root-level layer package when features already exist.\n</code></pre> <p>Feature Naming and Layer Package Prefixing</p> <p>Use the full, unique name for the feature when using <code>cmf new feature</code> command. The CLI does not add prefixes or suffixes. Layer packages within a feature should be prefixed with the feature name (e.g., <code>Cmf.Custom.Baseline.Business</code>, <code>Cmf.Custom.Baseline.UI</code>) to avoid naming conflicts.</p>"},{"location":"02-learn/concepts/project-scaffold/#choosing-scaffold-strategy","title":"Choosing Scaffold Strategy","text":"<ul> <li>Traditional: Simpler projects, single team, identical site customizations.</li> <li>Feature-Driven: Complex projects, multiple teams/sites, shared features with variations.</li> </ul>"},{"location":"02-learn/concepts/project-scaffold/#additional-considerations","title":"Additional Considerations","text":""},{"location":"02-learn/concepts/project-scaffold/#package-dependencies","title":"Package Dependencies","text":"<p>Each package layer dependencies are defined in <code>cmfpackage.json</code>. The CM CLI uses these definitions and the <code>repositories.json</code> file (at the project root) to resolve dependencies and their location.</p>"},{"location":"02-learn/concepts/project-scaffold/#git-repository-management","title":"Git Repository Management","text":"<p>Tests are scoped to the entire repository. For Feature-Driven projects, consider these Git strategies:</p> <ul> <li>Single Repository: All common features in one repository. Good for compatibility testing but lacks isolation.</li> <li>Multiple Repositories: Each repository for a site or feature combination. Enables tailored testing and dependency management.</li> </ul> <p>For each repository, define its scope, choose the appropriate scaffold, and ensure <code>cmfpackage.json</code> and <code>repositories.json</code> accurately reflect dependencies.</p>"},{"location":"02-learn/concepts/project-types/","title":"Project Types","text":"<p>This guide provides an overview of the various customization projects supported.</p>"},{"location":"02-learn/concepts/project-types/#general-information","title":"General Information","text":"<p>The @criticalmanufacturing/cli allows you to create three types of projects:</p> <ol> <li>A custom project for MES v10 onwards;</li> <li>A custom project for MES v9 or prior versions;</li> <li>A MES App project.</li> </ol> <p>The type of project is defined during the execution of the <code>cmf init</code> command, depending on the MES version selected and the value of <code>--repositoryType</code> parameter.</p>"},{"location":"02-learn/concepts/project-types/#using-an-infrastructure-settings-file","title":"Using an Infrastructure Settings File","text":"<p>The examples below assume you're using an infrastructure settings file to store development environment details. Refer to the infrastructure config file specification for more information.</p>"},{"location":"02-learn/concepts/project-types/#mes-v10-onwards","title":"MES v10 onwards","text":"<p>For CM MES v10 and onwards customization projects, the initialization command has the following required parameters:</p> <ul> <li>Customization Project Name;</li> <li>Customization Project Version;</li> <li>DEV Infrastructure Settings;</li> <li>DEV Environment Settings;</li> <li>CM MES, NuGets, test libraries version (usually the same version);</li> <li>CM MES ISO location;</li> <li>CM ngx-schematics library version;</li> <li>Deployment Directory (the base folder for storing project installation packages).</li> </ul> <pre><code>cmf init {{project_name}} \n    --version {{my_project_version}} \n    --infra   {{dev_infra_file_path}} `\n    --config  {{dev_env_file_path}} `\n    --MESVersion {{mes_version}} `\n    --nugetVersion {{mes_version}} `\n    --testScenariosNugetVersion {{mes_version}} `\n    --ISOLocation {{mes_iso_path}} `\n    --ngxSchematicsVersion {{ngx_version}} `\n    --deploymentDir {{deployment_directory_path}}\n</code></pre> <p>e.g.:</p> <pre><code>cmf init ExampleProject `\n    --version 1.0.0 `\n    --infra ..\\config\\infra.json `\n    --config ..\\config\\ExampleEnvironment.json `\n    --MESVersion 11.0.0 `\n    --nugetVersion 11.0.0 `\n    --testScenariosNugetVersion 11.0.0 `\n    --ISOLocation \\\\directory\\CriticalManufacturing.iso `\n    --ngxSchematicsVersion 11.0.0 `\n    --deploymentDir \\\\files\\Deployments\n</code></pre>"},{"location":"02-learn/concepts/project-types/#determining-ngx-schematics-version","title":"Determining <code>ngx-schematics</code> Version","text":"<p>To determine the correct <code>ngx-schematics</code> version for your CM MES release:</p> <ol> <li> <p>Construct the MES <code>dist-tag</code>:</p> <ul> <li>Format: <code>release-{{MES_VERSION}}</code> </li> <li><code>{{MES_VERSION}}</code>: Concatenation of MES major, minor, and patch versions without separators.</li> </ul> </li> <li> <p>Use the <code>npm view</code> command (Replace <code>${dist_tag}</code> by the proper value):</p> <pre><code>npm view @criticalmanufacturing/ngx-schematics@${dist_tag} version\n</code></pre> <p>Replace <code>${dist_tag}</code> .</p> </li> </ol> <p>Per example, for MES version <code>10.2.5</code>:</p> <ul> <li>Use the MES dist-tag: <code>release-1025</code></li> <li>And the command:</li> </ul> <pre><code>npm view @criticalmanufacturing/ngx-schematics@release-1025 version \n</code></pre> <p>Examples of Compatibility Matrix</p> MES version MES dist-tag CM ngx-schematics version 10.2.5 release-1025 1.3.6 11.0.1 release-1101 11.0.1"},{"location":"02-learn/concepts/project-types/#mes-v9-or-below","title":"MES v9 or below","text":"<p>For CM MES v9 or prior MES versions customization projects, the initialization command has the following required parameters:</p> <ul> <li>Customization Project Name;</li> <li>Customization Project Version;</li> <li>DEV Infrastructure Settings;</li> <li>DEV Environment Settings;</li> <li>CM MES, NuGets, test libraries version (usually the same);</li> <li>CM MES ISO location;</li> <li>CM HTML Generator library version;</li> <li>CM Dev Tasks library version;</li> <li>Yeoman library version;</li> <li>Deployment Directory(the base folder for storing project installation packages).</li> </ul> <pre><code>cmf init {{project_name}} \n    --version {{my_project_version}} \n    --infra   {{dev_infra_file_path}} `\n    --config  {{dev_env_file_path}} `\n    --MESVersion {{mes_version}} `\n    --nugetVersion {{mes_version}} `\n    --testScenariosNugetVersion {{mes_version}} `\n    --ISOLocation {{mes_iso_path}} `\n    --DevTasksVersion {{cm_dev_tasks_lib_version}} `\n    --HTMLStarterVersion {{cm_html_starter_lib_version}} `\n    --yoGeneratorVersion {{yeoman_library_version}} `\n    --deploymentDir {{deployment_directory_path}} `\n</code></pre> <p>e.g.:</p> <pre><code>cmf init ExampleProject `\n    --version 1.0.0 `\n    --infra ..\\config\\infra.json `\n    --config ..\\config\\ExampleEnvironment.json `\n    --MESVersion 9.0.11 `\n    --nugetVersion 9.0.11 `\n    --testScenariosNugetVersion 9.0.11 `\n    --ISOLocation \\\\setups\\CriticalManufacturing.iso `\n    --HTMLStarterVersion 8.0.0 `\n    --DevTasksVersion 9.0.4 `\n    --yoGeneratorVersion 3.1.0 `\n    --deploymentDir \\\\files\\Deployments\n</code></pre>"},{"location":"02-learn/concepts/project-types/#compatibility-matrix","title":"Compatibility Matrix","text":"MES Version HTML Starter Dev Tasks Yeoman 5.x.x 5.1.9 5.1.9 1.0.1 6.0.x 6.0.0 6.0.0 1.0.1 6.1.x 6.1.0 6.1.0 1.0.1 6.3.x 6.3.0 6.3.0 1.0.1 6.4.x 6.3.0 6.4.0 1.0.1 7.0.x 6.3.0 7.0.1 3.1.0 7.1.x 7.1.1 7.1.1 3.1.0 7.2.x 7.2.3 7.1.1 3.1.0 7.x.x 7.2.3 7.1.1 3.1.0 8.0.x 8.0.7 8.0.2 3.1.0 8.x.x 8.1.1 8.1.3 3.1.0 9.x.x 8.1.1 8.1.3 3.1.0 <p>Note</p> <p>Use <code>npm info</code> to determine the recommended dependencies version. e.g.:</p> <pre><code># Check for MES release tags (`release-{{MES_VERSION}}`)\nnpm info @criticalmanufacturing/generator-html\nnpm info @criticalmanufacturing/dev-tasks\n\n# Yeoman dependency is stated on the dependency list\n# of the generator-html package, e.g.:\nnpm info @criticalmanufacturing/generator-html@8.1.1\n</code></pre>"},{"location":"02-learn/concepts/project-types/#mes-app","title":"MES App","text":"<p>A MES App project must have as its target a MES v10 or higher version. As so all requirements are defined for an MES v10 onwards customization project.</p> <p>To create an App, you must specify the following additional parameters on the <code>cmf init</code> command:</p> <ul> <li>Application Name;</li> <li>Application ID;</li> <li>Application Author;</li> <li>Application Description;</li> <li>Application MES Target Framework;</li> <li>Application Licensed Name;</li> <li>Repository Type argument must be set to App.</li> </ul> <pre><code>cmf init {{project_name}} `\n    --version {{my_project_version}} ` \n    --infra   {{dev_infra_file_path}} `\n    --config  {{dev_env_file_path}} `\n    --MESVersion {{mes_version}} `\n    --nugetVersion {{mes_version}} `\n    --testScenariosNugetVersion {{mes_version}} `\n    --ISOLocation {{mes_iso_path}} `\n    --ngxSchematicsVersion {{ngx_version}} `\n    --deploymentDir {{deployment_directory_path}} `\n    --appName {{app_name}} `\n    --appId {{app_id}} `\n    --appAuthor {{app_author}} `\n    --appDescription {{app_description}} `\n    --appTargetFramework {{app_mes_target_framework}} `\n    --appLicensedApplication {{app_licensed_application_name}} `\n    --repositoryType \"App\"\n</code></pre> <p>e.g.:</p> <pre><code>cmf init ExampleProject `\n    --version 1.0.0 `\n    --infra ..\\config\\infra.json `\n    --config ..\\config\\ExampleEnvironment.json `\n    --MESVersion 11.0.0 `\n    --ngxSchematicsVersion 11.0.0 `\n    --nugetVersion 11.0.0 `\n    --testScenariosNugetVersion 11.0.0 `\n    --deploymentDir \\\\directory\\Deployments `\n    --appName \"My App\" `\n    --appId \"MyApp\" `\n    --appAuthor \"Critical Manufacturing\" `\n    --appDescription \"My First App\" `\n    --appTargetFramework 11.0.0 `\n    --appLicensedApplication \"My App\" `\n    --repositoryType \"App\"\n</code></pre>"},{"location":"02-learn/concepts/release-process/","title":"Release Process","text":"<p>By default, @criticalmanufacturing/cli scaffolding does not provide any built-in CI/CD pipelines, giving you the flexibility to choose any tool/platform that suits your needs.</p> <p>However, on following sub-sections we share as a reference our internal process, that you can use to build your own pipeline.</p>"},{"location":"02-learn/concepts/release-process/#pull-requests-prs-pipeline","title":"Pull Requests (PRs) Pipeline","text":"<p>For each changed package, we run the command <code>cmf build --test</code>, which compiles the package and runs unit tests if available, comparing with the target branch.</p> <p>Note</p> <p>A package is considered as \"changed\" when any file is modified inside a folder with a cmfpackage.json file.</p> <p>An alternative is to run <code>cmf build --test</code> for all packages.</p>"},{"location":"02-learn/concepts/release-process/#continuous-integration-ci-piepeline","title":"Continuous Integration (CI) Piepeline","text":"<p>After merging code into the main branch, we perform the following steps:</p> <ol> <li>Run <code>cmf build --test</code> to ensure the successful building of all packages and execution of unit tests.</li> <li>Run <code>cmf pack -o {{packages_ci_out_dir_path}}</code> to generate a package that can be installed via DevOpsCenter or Critical Manufacturing Setup.</li> </ol>"},{"location":"02-learn/concepts/release-process/#continuous-deployment-cd-pipeline","title":"Continuous Deployment (CD) Pipeline","text":"<p>Install the package on the target MES environment (according to below instructions) and run the regression tests.</p> Containers EnvironmentTraditional Environment (Windows VMs) <ol> <li>Follow the instructions in the DevOps Center documentation.</li> <li>Copy the generated packages to the folder defined in volume Boot Packages.</li> <li>In the Configuration &gt; General Data step, set the Package to Install as <code>RootPackageId@PackageVersion</code>.</li> </ol> <ol> <li>Follow the Traditional Installation instructions in the MES documentation.</li> <li>In the Package Sources step, add the path where your packages are located ({{packages_ci_out_dir_path}} specified on the pack command).</li> </ol>"},{"location":"02-learn/help/","title":"Help","text":""},{"location":"02-learn/help/#contextual-help","title":"Contextual Help","text":"<p>The @criticalmanufacturing/cli provides help in the context of each command. To access it, use the <code>-h</code> or <code>--help</code> switch.</p> <p>Follows a set of examples, to understand its usage:</p> <ul> <li> <p>To see all commands available on the CLI, use:</p> <pre><code>cmf -h\n</code></pre> <p>or</p> <pre><code>cmf --help\n</code></pre> </li> <li> <p>To see a specific command help, write the command and then add the help switch:</p> <pre><code># e.g for the project \"init\" command use:\ncmf init -h\n\n# e.g to list available package types use:\ncmf new --help\n\n# e.g. to get the details for \"new business\" command use:\ncmf new business --help\n</code></pre> </li> </ul>"},{"location":"02-learn/help/#debug-level-messages","title":"Debug-Level Messages","text":"<p>To enable debug-level logs on the console when running <code>cmf</code> commands, use the  <code>-l Debug</code> option before any other  parameters.</p> <p>Per example, to active debug messages for the <code>cmf build</code> command, use:</p> <pre><code>cmf -l Debug build\n</code></pre>"},{"location":"02-learn/migration/","title":"Migration","text":"<p>A big effort is made to ensure that a new CLI release does not break previous projects' scaffolding and maintains compatibility with previous MES releases.</p> <p>Nevertheless, please consider the conventions and instructions in this guide when upgrading the CLI for your project.</p>"},{"location":"02-learn/migration/#conventions","title":"Conventions","text":""},{"location":"02-learn/migration/#minor-versions-upgrade","title":"Minor versions upgrade","text":"<p>Minor CLI version upgrades should not affect your project, only provide enhancements or fixes that should be retro-compatible.</p> <p>If you found an issue, open a Support Request on the CM Customer Portal or send us a pull request with a fix proposal.</p>"},{"location":"02-learn/migration/#major-versions-upgrade","title":"Major versions upgrade","text":"<p>The CLI major version is incremented every time there are breaking changes on the CLI. In such case, if you decide to upgrade to a new release, please execute the following:</p> <ul> <li>Review the release log to get hints on what was changed;</li> <li>Install the new CLI;</li> <li>Re-scaffold your project;</li> <li>Merge your customization changes into the new project structure.</li> </ul> <p>Please, review some version-specific migration details:</p> <ul> <li>Migration to V3 or above</li> </ul>"},{"location":"02-learn/migration/#release-tags","title":"Release Tags","text":"<p>The @criticalmanufactuing/cli has release tags that you may use to dynamically retrieve the latest @releases:</p> <ul> <li>latest: tag applied to the latest stable package that has been released;</li> <li>next: tag applied to the latest release, usually used by the CLI early adopters to use and test the latest features/fixes.</li> </ul>"},{"location":"02-learn/migration/#upgrade-step-by-step","title":"Upgrade Step-by-Step","text":"<p>To upgrade the @criticalmanufacturing/cli:</p> <ul> <li>Open a command line with administration privileges;</li> <li>Install any new prerequisites software, if needed;</li> <li> <p>Use the following command to upgrade to the latest stable version:</p> <pre><code>npm install -g --force @criticalmanufacturing/cli@latest\n</code></pre> </li> <li> <p>Or use the following command to upgrade to the next release (for early adopters):</p> <pre><code>npm install -g --force @criticalmanufacturing/cli@next\n</code></pre> </li> </ul>"},{"location":"02-learn/migration/migration-v3/","title":"Migration To v3x","text":"<p>On @criticalmanaufacturing/cli v3, default steps on cmfpackage.json configuration files for Business and Data Packages are injected by the cli. If you are upgrading to cmf-cli 3x you should remove all the steps from the following packages:</p> <ul> <li>Business;</li> <li>Data;</li> <li>IoTData;</li> <li>Tests MasterData.</li> </ul>"},{"location":"02-learn/tutorials/","title":"Tutorials","text":"<p>Welcome to the CM CLI Tutorials!</p> <p>This page is your one-stop shop for learning how to use the Critical Manufacturing Command Line Interface (CM CLI) to streamline your MES customization projects.</p> <p>Master the Essentials:</p> <ol> <li> <p>Scaffolding   Get started by setting up your project's foundation with ease.</p> </li> <li> <p>Building and Release Your Project   Transform your code into a functional package ready for deployment.   Package your customizations efficiently for seamless integration into the MES system.</p> </li> </ol> <p>Ready to dive in? Click on any of the tutorials above to begin your journey.</p>"},{"location":"02-learn/tutorials/1-scaffolding/","title":"Scaffolding","text":"<p><code>@criticalmanufacturing/cli</code> provides a set of commands that allows you to scaffold a CM MES Customization project. This tutorial provides you the guidance on how to create a new customization project file structure.</p> <p>Tip</p> <p>To re-scaffold a project, execute the scaffold procedure on a clean directory. Then, merge the previous customization project files into the new project structure.</p>"},{"location":"02-learn/tutorials/1-scaffolding/#prerequisites","title":"Prerequisites","text":""},{"location":"02-learn/tutorials/1-scaffolding/#install-cli","title":"Install cli","text":"<p><code>@criticalmanufacturing/cli</code> must be installed on your environment for you to use the scaffolding functionality. Check its installation guide here.</p>"},{"location":"02-learn/tutorials/1-scaffolding/#prepare-nuget-and-npm-repositories","title":"Prepare NuGet and NPM repositories","text":"<p>Customization projects generated by <code>@criticalmanufacturing/cli</code> make use of CM MES NuGet and NPM packages, which are not publicly available. Before starting the scaffolding of a project:</p> <ul> <li>Get access to CM NuGet, NPM and Docker repositories or their proxy.</li> <li>Evaluate the need to set up a proxy for your organization, to avoid network performance issues.</li> </ul> <p>Location and Access</p> <p>The location and procedures to access CM MES Repositories are available on Critical Manufacturing Developer Portal.</p>"},{"location":"02-learn/tutorials/1-scaffolding/#create-the-infrastructurejson-file","title":"Create the infrastructure.json file","text":"<p>To initialize a new Customization project with <code>@criticalmanufacturing/cli</code>, you need to provide an infrastructure file with the settings for NuGet and NPM repositories. The infrastructure specification page details this file structure.</p>"},{"location":"02-learn/tutorials/1-scaffolding/#createexport-the-environmentjson-file","title":"Create/export the environment.json file","text":"<p>A valid MES test/integration environment configuration file is required during the scaffolding. You may create it using:</p> <ul> <li>CM MES ISO Setup Wizard - If your environment is running on Windows VMs or Bare Metal machines infrastructure.</li> <li>CM MES DevOps Center Page - If your environment is running in container infrastructure.</li> </ul> <p>For the CM MES ISO Setup Wizard, you may obtain this file, on the last prompt step of the setup wizard, by selecting the \"Export\" functionality. It will allow you to save the environment settings prompted in the previous steps.</p> <p>For DevOps Center, you just need to access your environment page and use the \"Export Parameters\" option to retrieve it.</p> <p>Warning</p> <p>The environment.json file contains sensitive information, for example, user accounts and authentication tokens. Store it in a safe location.</p>"},{"location":"02-learn/tutorials/1-scaffolding/#retrieve-lbos","title":"Retrieve LBOs","text":"<p>Generate the LBO Libraries for your MES installation, as described in the LBO Generator Documentation.</p>"},{"location":"02-learn/tutorials/1-scaffolding/#scaffold-step-by-step","title":"Scaffold Step-by-Step","text":""},{"location":"02-learn/tutorials/1-scaffolding/#1-initialize-the-project","title":"1. Initialize the project","text":"<p>After ensuring that you have all scaffold prerequisites, your first operation is to initialize your project repository.</p> <p>The instructions are available in the Project Init Tutorial.</p>"},{"location":"02-learn/tutorials/1-scaffolding/#2-generate-layers-packages","title":"2. Generate Layers Packages","text":"<p>The next step is to select your project scaffold structure and create the customization packages for your project.</p> <p>The instructions are available in the Project Scaffold Tutorial.</p>"},{"location":"02-learn/tutorials/1-scaffolding/#3-execute-post-scaffold-operations","title":"3. Execute Post-Scaffold Operations","text":"<p>It is common for projects to require tailoring of their package configuration.</p> <p>Check and apply the applicable post-scaffold operations defined in the Project Post-Scaffold Tutorial.</p>"},{"location":"02-learn/tutorials/1-scaffolding/1-project-init/","title":"Initialize a Project","text":"<p>This tutorial walks you through initializing a new CM MES project using the <code>cmf init</code> command.</p>"},{"location":"02-learn/tutorials/1-scaffolding/1-project-init/#1-create-the-project-folder","title":"1. Create the project folder","text":"<p>Create a folder to store your new customization project files.</p> <p>Warning</p> <p>On Windows, some applications and libraries do not support file paths longer than 256 characters.  CM MES customization projects have long file paths. To avoid problems on Windows OS, you should:</p> <ul> <li>Use short project file names;</li> <li>Initialize your projects on a folder as nearest as possible to the filesystem drive root.</li> </ul>"},{"location":"02-learn/tutorials/1-scaffolding/1-project-init/#2-open-powershell-command-line","title":"2. Open PowerShell command line","text":"<p>Open a PowerShell terminal and navigate to your new project folder.</p>"},{"location":"02-learn/tutorials/1-scaffolding/1-project-init/#3-check-nodejs-and-npm-version","title":"3. Check Node.js and NPM Version","text":"<p>Run the following commands to check your current versions:</p> <pre><code># Check Node.js version\nnode -v\n\n#Check NPM version\nnpm -v\n</code></pre> <p>Validate that their versions match the compatibility list stated in the installation guide. If needed, use <code>nvm</code> command to fix it.</p>"},{"location":"02-learn/tutorials/1-scaffolding/1-project-init/#4-initialize-project","title":"4. Initialize Project","text":"<p>You can initialize a MES Customization or App project workspace using the <code>cmf init</code> command. The following examples illustrate its usage.</p> <p>Software and MES ISO Dependencies</p> <ul> <li>Dependencies Version: To determine the software dependencies version to use on the <code>init</code> command, check the instructions on the Project Types Concept page.</li> <li>MES ISO location is optional: You only need to provide this parameter if your MES or one of its optional components runs on a Windows environment. More details on MES components are available on the MES System Architecture page.</li> </ul> MES v10 or aboveMES v9 or belowMES App <pre><code>cmf init ExampleProject `\n    --version 1.0.0 `\n    --infra ..\\config\\infra.json `\n    --config ..\\config\\env.json `\n    --MESVersion 11.0.0 `\n    --nugetVersion 11.0.0 `\n    --testScenariosNugetVersion 11.0.0 `\n    --deploymentDir \\\\directory\\Deployments `\n    --ISOLocation \\\\directory\\CriticalManufacturing.iso `\n    --ngxSchematicsVersion 11.0.0\n</code></pre> <pre><code>cmf init ExampleProject `\n    --version 1.0.0 `\n    --infra ..\\config\\infra.json `\n    --config ..\\config\\ExampleEnvironment.json `\n    --MESVersion 9.0.11 `\n    --nugetVersion 9.0.11 `\n    --testScenariosNugetVersion 9.0.11 `\n    --deploymentDir \\\\vm-project\\Deployments `\n    --ISOLocation \\\\setups\\CriticalManufacturing.iso `\n    --DevTasksVersion 8.1.3 `\n    --HTMLStarterVersion 8.1.1 `\n    --yoGeneratorVersion 3.1.0\n</code></pre> <pre><code>cmf init ExampleProject `\n    --version 1.0.0 `\n    --infra ..\\config\\infra.json `\n    --config ..\\config\\ExampleEnvironment.json `\n    --MESVersion 11.0.0 `\n    --nugetVersion 11.0.0 `\n    --testScenariosNugetVersion 11.0.0 `\n    --deploymentDir \\\\directory\\Deployments `\n    --ngxSchematicsVersion 11.0.0 `\n    --appName \"My App\" `\n    --appId \"MyApp\" `\n    --appAuthor \"Critical Manufacturing\" `\n    --appDescription \"My First App\" `\n    --appTargetFramework 11.0.0 `\n    --appLicensedApplication \"My App\" `\n    --repositoryType \"App\"\n</code></pre>"},{"location":"02-learn/tutorials/1-scaffolding/1-project-init/#5-review-the-created-project-structure","title":"5. Review the created project structure","text":"<p>The <code>cmf init</code> command should have terminated with success and created a basic project structure similar to:</p> <pre><code>\ud83d\udce6ExampleProject\n\u2523 \ud83d\udcc2.config               # Dotnet tools configuration\n\u2503 \u2517 \ud83d\udcdcdotnet-tools.json\n\u2523 \ud83d\udcc2EnvironmentConfigs    # Environments configuration repository\n\u2503 \u2517 \ud83d\udcdcExampleEnvironment.json\n\u2523 \ud83d\udcc2Libs                  # External libs dependencies (binaries)\n\u2503 \u2517 \ud83d\udcc2...\n\u2523 \ud83d\udcdc.gitignore            # Spec files to ignore\n\u2523 \ud83d\udcdc.project-config.json  # Project configuration used during scaffolding\n\u2523 \ud83d\udcdccmfpackage.json       # Project root package\n\u2523 \ud83d\udcdcglobal.json           # Dotnet global.json\n\u2523 \ud83d\udcdcNuGet.Config          # NuGet repository configuration\n\u2517 \ud83d\udcdcrepositories.json     # The build/release repositories configuration\n</code></pre> <p>Note</p> <p>The initial project structure may vary, depending on the CM CLI version and the project type selected (<code>--repositoryType</code> argument).</p>"},{"location":"02-learn/tutorials/1-scaffolding/1-project-init/#6-validate-repositoriesjson","title":"6. Validate <code>repositories.json</code>","text":"<p>Verify the <code>repositories.json</code> file in the project root folder conforms to the specification.</p>"},{"location":"02-learn/tutorials/1-scaffolding/1-project-init/#7-add-lbos-sdk","title":"7. Add LBOs SDK","text":"<p>Store your environment's LBOs in the <code>Libs\\LBOs</code> directory of your project.</p>"},{"location":"02-learn/tutorials/1-scaffolding/1-project-init/#8-store-project-on-source-control","title":"8. Store project on source control","text":"<p>Use a source control system (like Git) to manage your project versions.</p> <p>Store the result of <code>cmf init</code> in the source control.</p> <p>Note</p> <p>The CM CLI assumes that you are using <code>git</code>. If that is not the case, adapt <code>.gitignore</code> files to your source control system.</p>"},{"location":"02-learn/tutorials/1-scaffolding/2-project-scaffold/","title":"Project Scaffold","text":"<p>After the project initialization, you need to start building the project structure using the <code>cmf new</code> command.</p>"},{"location":"02-learn/tutorials/1-scaffolding/2-project-scaffold/#1-understanding-project-scaffolds","title":"1. Understanding Project Scaffolds","text":"<p>The two main project scaffold types offered by CM CLI are:</p> <ul> <li>Traditional Scaffold: This is a well-suited option for projects with a simple, monolithic structure. It includes all necessary layers in a single package set.</li> <li>Feature-Driven Scaffold: This approach is ideal for more complex projects with multiple features and potential dependencies between them. Each feature's code and resources are organized into separate packages within the project repository.</li> </ul> <p>Note</p> <p>Refer to the Project Scaffold Concepts page for a detailed comparison and best practices for choosing the right scaffold type.</p>"},{"location":"02-learn/tutorials/1-scaffolding/2-project-scaffold/#2-selecting-your-scaffold-type","title":"2. Selecting Your Scaffold Type","text":"<ul> <li>Review the information provided on the Project Scaffold Concepts page.</li> <li>Based on your project's complexity and needs, determine the most suitable scaffold type (Traditional or Feature-Driven).</li> </ul>"},{"location":"02-learn/tutorials/1-scaffolding/2-project-scaffold/#3-creating-project-layers-packages","title":"3. Creating Project Layers Packages","text":"<p>Once you've chosen your scaffold type, proceed with creating the required project layers packages using the <code>cmf new</code> command.</p> <p>Important</p> <p>Only add package layers that are truly necessary for your project. You can always add additional layers later on.</p> <p>A full description of each package is available at Layers Packages Concept page.</p>"},{"location":"02-learn/tutorials/1-scaffolding/2-project-scaffold/#31-traditional-scaffold-step-by-step","title":"3.1. Traditional Scaffold - Step-by-Step","text":"<p>This section guides you through creating a traditional project scaffold. Adapt the commands based on your specific project requirements and adaptions documented on the Layers Packages Concept page:</p> MES v10 or aboveMES v9 or below <pre><code>#Go to your project root\ncd {{project_root_path}}\n\n#Create Business Package Layer\ncmf new business\n\n# Create Data Package Layer\ncmf new data --businessPackage .\\Cmf.Custom.Business\\\n\n# Create HTML Package Layer\ncmf new html\n\n# Create Help Package Layer\ncmf new help\n\n# Create  Test Package Layer\ncmf new test\n\n# Create Database Package Layer (Optional)\ncmf new database\n\n# Create Microsoft Reporting Services Package (Optional)\ncmf new reporting \n\n# Create a grafana Package Layer (optional)\ncmf new grafana\n\n# ATTENTION: To create IoT Package Layer supporting Task Libraries uncomment the command below (for MES v10.27 or above):\n\n# cmf new iot\n\n# ATTENTION: To create Iot Package Layer supporting Tasks Package Library uncomment the command below:\n\n# cmf new iot --isAngularPackage --htmlPackageLocation .\\Cmf.Custom.Html\n</code></pre> <pre><code>#Go to your project root\ncd {{project_root_path}}\n\n#Create Business Package Layer\ncmf new business\n\n# Create Data Package Layer\ncmf new data --businessPackage .\\Cmf.Custom.Business\\\n\n# Create HTML Package Layer\ncmf new html `\n     --version 1.0.0 `\n     --htmlPackage H:\\packages\\Cmf.Presentation.HTML.9.1.8.zip\n\n# Create Help Package Layer\ncmf new help `\n    --version 1.0.0 `\n    --documentationPackage H:\\packages\\Cmf.Documentation.9.1.8.zip\n\n# Create  Test Package Layer\ncmf new test\n\n# Create Database Package Layer (Optional)\ncmf new database\n\n# Create Microsoft Reporting Services Package (Optional)\ncmf new reporting \n\n# Create a grafana Package Layer (optional)\ncmf new grafana\n\n# Create IoT Package Layer (Optional)\ncmf new iot\n</code></pre>"},{"location":"02-learn/tutorials/1-scaffolding/2-project-scaffold/#32-feature-driven-scaffold-example","title":"3.2 Feature-Driven Scaffold - Example","text":"<p>This section illustrates creating a feature-driven project scaffold for a project with multiple features and dependencies:</p> <p>Project Features:</p> <ul> <li>Baseline (common features)</li> <li>FeatureX1 (optional feature)</li> <li>FeatureX2 (optional feature)</li> <li>SiteA (site-specific features)</li> <li>SiteB (site-specific features)</li> </ul> <p>Feature Dependencies:</p> <ul> <li>SiteA depends on Baseline and FeatureX1</li> <li>SiteB depends on Baseline, FeatureX2, and FeatureY (from another repository)</li> </ul> <p>Scaffolding Steps:</p> <pre><code># Navigate to your project's root directory\ncd {{project_root_path}}\n\n# Create Test Package Layer\ncmf new test\n\n# Create individual feature packages\ncmf new feature Cmf.Custom.{{TENANT}}.Baseline\ncmf new feature Cmf.Custom.{{TENANT}}.FeatureX1\ncmf new feature Cmf.Custom.{{TENANT}}.FeatureX2\ncmf new feature Cmf.Custom.{{TENANT}}.SiteA\ncmf new feature Cmf.Custom.{{TENANT}}.SiteB\n\n# Add Package Layers to Each Feature Directory (Examples)\n# (Navigate to each feature directory and create necessary layers packages)\n\ncd {{project_root_path}}/Features/Cmf.Custom.{{TENANT}}.Baseline\ncmf new business\ncmf new html\n...\n\ncd {{project_root_path}}/Features/Cmf.Custom.{{TENANT}}.FeatureX1\ncmf new business\ncmf new html\ncmf new reporting\n...\n\n# (Follow similar structure for other features)\n...\n\n# Edit cmfpackage.json and add the package dependencies\n# for SiteA and SiteB feature packages\ncode {{project_root_path}}/Features/Cmf.Custom.{{TENANT}}.SiteA/cmfpackage.json\n...\ncode {{project_root_path}}/Features/Cmf.Custom.{{TENANT}}.SiteB/cmfpackage.json\n...\n\n# Edit repositories.json to include the path to the directory\n# with FeatureY release packages\ncode {{project_root_path}}/repository.json\n</code></pre>"},{"location":"02-learn/tutorials/1-scaffolding/3-post-scaffolding/","title":"Post-scaffolding","text":""},{"location":"02-learn/tutorials/1-scaffolding/3-post-scaffolding/#1-package-tailoring","title":"1. Package tailoring","text":"<p>The packages generated by <code>cmf new</code> are as neutral, to be compatible with as many deployment scenarios as possible. However, some tailoring is advised for specific targets. This tailoring allows the packages to better adapt to their deployment target, eliminating the need for manual steps when installing.</p> <p>Below are some tailoring options per CLI version and target environment. for specific targets. It's recommended that these changes be applied according to your target environment.</p> <p>Important</p> <p>Preserve the order of steps referenced in this document.</p>"},{"location":"02-learn/tutorials/1-scaffolding/3-post-scaffolding/#cli-version-3x","title":"CLI version 3x","text":"Containers Environment <p>On the Tests MasterData Package add the property:</p> <pre><code>\"isToSetDefaultSteps\": false\n</code></pre> Traditional Environment <p>On the Business Package remove steps:</p> <pre><code>\"steps\": [\n{\n    \"order\": 1, \n    \"type\": \"Generic\", \n    \"onExecute\": \"$(Agent.Root)/agent/scripts/stop_host.ps1\" \n},\n{ \n    \"order\": 2, \n    \"type\": \"DeployFiles\", \n    \"ContentPath\": \"**/!(Cmf.Custom.*.BusinessObjects*).dll\" \n},\n{ \n    \"order\": 3, \n    \"type\": \"Generic\", \n    \"onExecute\": \"$(Agent.Root)/agent/scripts/start_host.ps1\" \n}\n]\n</code></pre> <p>On Data, IoTData and Tests MasterData Package remove steps:</p> <pre><code>\"steps\": [\n{ \n    \"order\": 1, \n    \"type\": \"Generic\", \n    \"onExecute\": \"$(Agent.Root)/agent/scripts/stop_host.ps1\" \n},\n{ \n    \"order\": 2, \n    \"type\": \"TransformFile\", \n    \"file\": \"Cmf.Foundation.Services.HostService.dll.config\", \n    \"tagFile\": true \n},\n{ \n    \"order\": 3, \n    \"type\": \"Generic\", \n    \"onExecute\": \"$(Agent.Root)/agent/scripts/start_host.ps1\" \n},\n{ \n    \"order\": 4, \n    \"type\": \"DeployFiles\", \n    \"ContentPath\": \"GenerateLBOs.ps1\"\n},\n{ \n    \"order\": 5, \n    \"type\": \"Generic\", \n    \"onExecute\": \"$(Package[Cmf.Custom.Package].TargetDirectory)/GenerateLBOs.ps1\" \n}\n]\n</code></pre>"},{"location":"02-learn/tutorials/1-scaffolding/3-post-scaffolding/#cli-version-2x","title":"CLI version 2x","text":"Containers Environment <p>On the Root Package add \"Cmf.Environment\" dependency:</p> <pre><code>\"dependencies\": [{ \n    \"id\": \"Cmf.Environment\", \n    \"version\": \"8.3.0\" \n}]\n</code></pre> <p>On the Business Package add the step to exclude custom Business objects deployment (they must be generated by the MES Host Service on the first start-up):</p> <pre><code>\"steps\": [{ \n    \"order\": \"1\", \n    \"type\": \"DeployFiles\", \n    \"ContentPath\": \"**/!(Cmf.Custom.*.BusinessObjects*).dll\" \n}]\n</code></pre> Traditional Environment <p>On the Root and IoT Root Package add \"CriticalManufacturing.DeploymentMetadata\" dependency:</p> <pre><code>\"dependencies\": [{\n    \"id\": \"CriticalManufacturing.DeploymentMetadata\", \"\n    version\": \"8.3.0\" \n}]\n</code></pre> <p>On the Business Package add the following steps to:</p> <pre><code>\"steps\": [\n{ \n    \"order\": 1,\n    \"type\": \"Generic\", \n    \"onExecute\": \"$(Agent.Root)/agent/scripts/stop_host.ps1\" \n},\n{ \n    \"order\": 2,\n    \"type\": \"DeployFiles\", \n    \"ContentPath\": \"**/!(Cmf.Custom.*.BusinessObjects*).dll\" \n},\n{ \n    \"order\": 3,\n    \"type\": \"Generic\",\n     \"onExecute\": \"$(Agent.Root)/agent/scripts/start_host.ps1\" \n}]\n</code></pre> <p>On Data, IoTData and Tests MasterData Package add steps:</p> <pre><code>\"steps\": [\n{ \n    \"order\": 1, \n    \"type\": \"Generic\", \n    \"onExecute\": \"$(Agent.Root)/agent/scripts/stop_host.ps1\" \n},\n{ \n    \"order\": 2, \n    \"type\": \"TransformFile\", \n    \"file\": \"Cmf.Foundation.Services.HostService.dll.config\", \n    \"tagFile\": true \n},\n{ \n    \"order\": 3, \n    \"type\": \"Generic\", \n    \"onExecute\": \"$(Agent.Root)/agent/scripts/start_host.ps1\" \n},\n{ \n    \"order\": 4,\n    \"type\": \"DeployFiles\", \n    \"ContentPath\": \"GenerateLBOs.ps1\" \n},\n{ \n    \"order\": 5, \n    \"type\": \"Generic\", \n    \"onExecute\": \"$(Package[Cmf.Custom.Package].TargetDirectory)/GenerateLBOs.ps1\" \n}]\n</code></pre>"},{"location":"02-learn/tutorials/1-scaffolding/3-post-scaffolding/#2-store-project-on-source-control","title":"2. Store project on source control","text":"<p>Store the results of project scaffolding on the source control.</p>"},{"location":"02-learn/tutorials/1-scaffolding/3-post-scaffolding/#3-automate-the-release-process","title":"3. Automate the release process","text":"<p>If possible automate your release process.</p> <p>Note</p> <p>CM has created the <code>cmf-pipelines</code> CLI plugin to automate the release process for teams using its internal infrastructure.  </p> <p>The CI/CD pipelines highly depend on the technology and infrastructure being used for the project, and due to that, this plugin is not publicly available. More information is available on CM Internal Development Portal.</p>"},{"location":"02-learn/tutorials/2-building-and-release/","title":"Build and Release","text":"<p>This tutorial guides you through building and releasing your MES customization project using the CM CLI.</p>"},{"location":"02-learn/tutorials/2-building-and-release/#building-packages","title":"Building Packages","text":""},{"location":"02-learn/tutorials/2-building-and-release/#option-a-building-individual-packages","title":"Option A. Building Individual Packages","text":"<ol> <li>Navigate to the Package Directory: Locate the directory containing the <code>cmfpackage.json</code> file for the specific package you want to build.</li> <li>Execute the Build Command: Run the following command in the package directory:</li> </ol> <pre><code>cmf build --test\n</code></pre> <ul> <li>The <code>--test</code> flag (optional) executes unit tests associated with the package during the build process.</li> </ul>"},{"location":"02-learn/tutorials/2-building-and-release/#option-b-building-all-packages-recursively","title":"Option B. Building All Packages Recursively","text":"<ol> <li>Navigate to Project Root: Open your terminal and navigate to the root directory of your MES project.</li> <li> <p>Execute the Script: Run the following PowerShell script to build all packages within the project recursively:</p> <pre><code># Get all directories containing a cmfpackage.json file\n$directories = Get-ChildItem -Recurse -Directory | Where-Object { Test-Path \"$($_.FullName)\\cmfpackage.json\" }\n\n# Iterate through each directory and execute the cmf build --test command\nforeach ($directory in $directories) {\n    cd $directory.FullName\n    Write-Host \"Building package in directory: $($directory.FullName)\"\n    cmf build --test\n    cd ..\n}\n</code></pre> </li> <li> <p>This script finds all subdirectories containing a <code>cmfpackage.json</code> file and executes the <code>cmf build --test</code> command in each directory, effectively building all packages within your project.</p> </li> </ol>"},{"location":"02-learn/tutorials/2-building-and-release/#packaging","title":"Packaging","text":"<p>Once you've built your packages, use the <code>cmf pack</code> command to transform them into a CM Deployment Framework (DF) package suitable for deployment:</p> <ol> <li>Navigate to Project Root: Ensure you're in the root directory of your MES project.</li> <li>Package the Root Package: Run the following command to build and package the root project:</li> </ol> <pre><code>cmf build --test\ncmf pack -o {{ci_repo_path}}\n</code></pre> <ul> <li> <p>Replace <code>{{ci_repo_path}}</code> with the desired output path for the deployment package. If omitted, the package will be created in the \"./Package\" directory.</p> </li> <li> <p>Package All Built Subdirectories Utilize the same script from the building process (modified slightly) to package all built subdirectories:</p> </li> </ul> <pre><code># Get all directories containing a cmfpackage.json file\n$directories = Get-ChildItem -Recurse -Directory | Where-Object { Test-Path \"$($_.FullName)\\cmfpackage.json\" }\n\n# Iterate through each directory and execute the cmf build --test command\nforeach ($directory in $directories) {\n    cd $directory.FullName\n    Write-Host \"Building and packing the package in directory: $($directory.FullName)\"\n    cmf build --test  # Exclude line if all packages have already been built\n    cmf pack -o {{ci_repo_path}}\n}\n</code></pre> <ul> <li>This script assumes all packages have already been built using the previous steps. It iterates through each subdirectory, executes <code>cmf pack</code> to create deployment packages, and places them in the specified output path.</li> </ul>"},{"location":"02-learn/tutorials/2-building-and-release/#build-release-package","title":"Build Release Package","text":"<p>To gather a Deployment Framework package and all its dependencies and place them under same directory to create a release package, you may use the <code>cmf assemble</code> command:</p> <pre><code># Go to project root\ncd {{project_root_path}}\n\n# Run the assemble command\ncmf assemble\n</code></pre> <ul> <li> <p>The assemble command assume that the current layer package   and all its dependencies were already build, pack and are stored   either on <code>CIRepo</code> or <code>Repositories</code> defined on project   <code>{{project_root_path}}/repositories.json</code> settings file.</p> </li> <li> <p>By default the packages found will be placed copied to the   \"./Assemble\" directory.</p> </li> </ul> <p>Note</p> <p>Use <code>cmf ls</code> on repository root to check if all dependencies are available.</p>"},{"location":"02-learn/tutorials/2-building-and-release/#install","title":"Install","text":"<p>To install the release package, follow the process presented on the Release Process Concept page.</p>"},{"location":"02-learn/tutorials/2-building-and-release/#additional-considerations","title":"Additional Considerations","text":""},{"location":"02-learn/tutorials/2-building-and-release/#managing-package-versions-after-release","title":"Managing Package Versions After Release","text":"<p>After releasing a package, any modifications necessitate updating the package's version number. Additionally, dependent packages must have their versions adjusted accordingly to maintain consistency and prevent conflicts.</p> <p>e.g.:</p> <p>Consider a project with three packages:</p> <ul> <li>Project Root: The main project package.</li> <li>HTML: Contains the user interface components.</li> <li>HELP: Provides project documentation, updated on every release (at least the release notes \u30b7).</li> </ul> <p>Initially, all packages are released as version 1.0.0. To introduce new UI changes, follow these steps:</p> <p>Version Bumping Procedure</p> <ol> <li> <p>Increase Project Root Version:</p> <ul> <li>Navigate to the project's root directory.</li> <li>Execute <code>cmf bump --version 1.0.1</code> to increment the version to 1.0.1.</li> </ul> </li> <li> <p>Update HTML Package:</p> <ul> <li>Change directory to the HTML package (as it's being modified).</li> <li>Run <code>cmf bump --version 1.0.1</code> to align its version with the project root.</li> </ul> </li> <li> <p>Adjust HELP Package (Optional):</p> <ul> <li>Change the directory to the Help package (as it's being modified).</li> <li>Run <code>cmf bump --version 1.0.1</code> to align its version with the project root.</li> </ul> </li> <li> <p>Update Dependencies:</p> </li> <li> <p>Modify the <code>cmfpackage.json</code> file in the project root to reflect the new versions of dependent packages (HTML and HELP in this case).</p> </li> <li> <p>Use <code>cmf ls</code> to verify that dependencies are correctly configured.</p> </li> </ol> <p>Note</p> <p>These guidelines ensure that your project's packages remain synchronized and manageable.</p>"},{"location":"03-explore/","title":"Explore CM CLI","text":"<p>Welcome to the Explore section! Here, you'll find reference resources to help you master the CM CLI.</p> <p>This is your go-to hub for in-depth information on:</p> <ul> <li> <p>CLI Commands   Discover the full range of commands available, their syntax, and   practical examples.</p> </li> <li> <p>Configuration Files   Learn how to customize CM CLI behavior through configuration   files. Understand the structure, options, and best practices.</p> </li> <li> <p>Plugins   Expand CM CLI's capabilities with the plugin ecosystem.   Explore available plugins and how to integrate them into your workflow.</p> </li> <li> <p>Telemetry   Gain insights into how CM CLI collects and uses data to improve   your experience. Understand our privacy policy and data usage   practices.</p> </li> </ul> <p>Dive in and start exploring!</p>"},{"location":"03-explore/commands/assemble/","title":"assemble","text":""},{"location":"03-explore/commands/assemble/#description","title":"Description","text":"<p>cmf assemble is a command that will read all the dependencies of a given package of type Root, and assemble it together.</p> <p>If a <code>repositories.json</code> file is available in the working directory, the repos will be also read from that file.</p> <p>The command will copy all defined dependencies from the repos, and paste it on the defined outputDir. If the package is not found, and error is thrown.</p> <p>Run <code>cmf assemble -h</code> to get a list of available arguments and options.</p>"},{"location":"03-explore/commands/assemble/#usage","title":"Usage","text":"<pre><code>cmf assemble [options] [&lt;workingDir&gt;]\n</code></pre>"},{"location":"03-explore/commands/assemble/#arguments","title":"Arguments","text":"Name Description <code>&lt;workingDir&gt;</code> Working Directory [default: .]"},{"location":"03-explore/commands/assemble/#options","title":"Options","text":"Name Description <code>-o, --outputDir &lt;outputDir&gt;</code> Output directory for assembled package [default: Assemble] <code>--cirepo &lt;cirepo&gt;</code> Repository where Continuous Integration packages are located (url or folder) <code>-r, --repo, --repos &lt;repos&gt;</code> Repository or repositories where published dependencies are located (url or folder) <code>--includeTestPackages</code> Include test packages on assemble <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/build/","title":"build","text":""},{"location":"03-explore/commands/build/#usage","title":"Usage","text":"<pre><code>cmf build [options] [&lt;packagePath&gt;] [command]\n</code></pre>"},{"location":"03-explore/commands/build/#arguments","title":"Arguments","text":"Name Description <code>&lt;packagePath&gt;</code> Package Path [default: .]"},{"location":"03-explore/commands/build/#options","title":"Options","text":"Name Description <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/build/#commands","title":"Commands","text":"Name Description <code>help</code>"},{"location":"03-explore/commands/build_help/","title":"build help","text":""},{"location":"03-explore/commands/build_help/#usage","title":"Usage","text":"<pre><code>cmf build [&lt;packagePath&gt;] help [options] [command]\n</code></pre>"},{"location":"03-explore/commands/build_help/#arguments","title":"Arguments","text":"Name Description <code>&lt;packagePath&gt;</code> Package Path [default: .]"},{"location":"03-explore/commands/build_help/#options","title":"Options","text":"Name Description <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/build_help/#commands","title":"Commands","text":"Name Description <code>generateBasedOnTemplates</code> <code>generateMenuItems</code>"},{"location":"03-explore/commands/build_help_generateBasedOnTemplates/","title":"build help generateBasedOnTemplates","text":""},{"location":"03-explore/commands/build_help_generateBasedOnTemplates/#usage","title":"Usage","text":"<pre><code>cmf build [&lt;packagePath&gt;] help generateBasedOnTemplates [options]\n</code></pre>"},{"location":"03-explore/commands/build_help_generateBasedOnTemplates/#options","title":"Options","text":"Name Description <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/build_help_generateMenuItems/","title":"build help generateMenuItems","text":""},{"location":"03-explore/commands/build_help_generateMenuItems/#usage","title":"Usage","text":"<pre><code>cmf build [&lt;packagePath&gt;] help generateMenuItems [options]\n</code></pre>"},{"location":"03-explore/commands/build_help_generateMenuItems/#options","title":"Options","text":"Name Description <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/bump/","title":"bump","text":""},{"location":"03-explore/commands/bump/#usage","title":"Usage","text":"<pre><code>cmf bump [options] [&lt;packagePath&gt;] [command]\n</code></pre>"},{"location":"03-explore/commands/bump/#arguments","title":"Arguments","text":"Name Description <code>&lt;packagePath&gt;</code> Package path [default: .]"},{"location":"03-explore/commands/bump/#options","title":"Options","text":"Name Description <code>-v, --version &lt;version&gt;</code> Will bump all versions to the version specified <code>-b, --buildNr &lt;buildNr&gt;</code> Will add this version next to the version (v-b) <code>-r, --root &lt;root&gt;</code> Will bump only versions under a specific root folder (i.e. 1.0.0) <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/bump/#commands","title":"Commands","text":"Name Description <code>iot</code>"},{"location":"03-explore/commands/bump_iot/","title":"bump iot","text":""},{"location":"03-explore/commands/bump_iot/#usage","title":"Usage","text":"<pre><code>cmf bump [&lt;packagePath&gt;] iot [options] [command]\n</code></pre>"},{"location":"03-explore/commands/bump_iot/#arguments","title":"Arguments","text":"Name Description <code>&lt;packagePath&gt;</code> Package path [default: .]"},{"location":"03-explore/commands/bump_iot/#options","title":"Options","text":"Name Description <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/bump_iot/#commands","title":"Commands","text":"Name Description <code>configuration &lt;path&gt;</code> [default: .] <code>customization &lt;packagePath&gt;</code> [default: .]"},{"location":"03-explore/commands/bump_iot_configuration/","title":"bump iot configuration","text":""},{"location":"03-explore/commands/bump_iot_configuration/#usage","title":"Usage","text":"<pre><code>cmf bump [&lt;packagePath&gt;] iot configuration [options] [&lt;path&gt;]\n</code></pre>"},{"location":"03-explore/commands/bump_iot_configuration/#arguments","title":"Arguments","text":"Name Description <code>&lt;path&gt;</code> Working Directory [default: .]"},{"location":"03-explore/commands/bump_iot_configuration/#options","title":"Options","text":"Name Description <code>-v, --version &lt;version&gt;</code> Will bump all versions to the version specified <code>-b, --buildNrVersion &lt;buildNrVersion&gt;</code> Will add this version next to the version (v-b) <code>-md, --masterData</code> Will bump IoT MasterData version (only applies to .json) [default: False] <code>-iot</code> Will bump IoT Automation Workflows [default: True] <code>-pckNames, --packageNames &lt;packageNames&gt;</code> Packages to be bumped <code>-r, --root &lt;root&gt;</code> Specify root to specify version where we want to apply the bump <code>-g, --group &lt;group&gt;</code> Group of workflows to change, typically they are grouped by Automation Manager <code>-wkflName, --workflowName &lt;workflowName&gt;</code> Specific workflow to be bumped <code>-isToTag</code> Instead of replacing the version will add -$version [default: False] <code>-mdCustomization</code> Instead of replacing the version will add -$version [default: False] <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/bump_iot_customization/","title":"bump iot customization","text":""},{"location":"03-explore/commands/bump_iot_customization/#usage","title":"Usage","text":"<pre><code>cmf bump [&lt;packagePath&gt;] iot customization [options] [&lt;packagePath&gt;]\n</code></pre>"},{"location":"03-explore/commands/bump_iot_customization/#arguments","title":"Arguments","text":"Name Description <code>&lt;packagePath&gt;</code> Package Path [default: .]"},{"location":"03-explore/commands/bump_iot_customization/#options","title":"Options","text":"Name Description <code>-v, --version &lt;version&gt;</code> Will bump all versions to the version specified <code>-b, --buildNrVersion &lt;buildNrVersion&gt;</code> Will add this version next to the version (v-b) <code>-pckNames, --packageNames &lt;packageNames&gt;</code> Packages to be bumped <code>-isToTag</code> Instead of replacing the version will add -$version [default: False] <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/init/","title":"init","text":""},{"location":"03-explore/commands/init/#usage","title":"Usage","text":"<pre><code>cmf init [options] &lt;projectName&gt; [&lt;rootPackageName&gt; [&lt;workingDir&gt;]]\n</code></pre>"},{"location":"03-explore/commands/init/#arguments","title":"Arguments","text":"Name Description <code>&lt;projectName&gt;</code> <code>&lt;rootPackageName&gt;</code> [default: Cmf.Custom.Package] <code>&lt;workingDir&gt;</code> Working Directory [default: .]"},{"location":"03-explore/commands/init/#options","title":"Options","text":"Name Description <code>--version &lt;version&gt;</code> Package Version [default: 1.0.0] <code>-c, --config &lt;config&gt; (REQUIRED)</code> Configuration file exported from Setup [default: ] <code>--deploymentDir &lt;deploymentDir&gt; (REQUIRED)</code> Deployments directory <code>--MESVersion &lt;MESVersion&gt; (REQUIRED)</code> Target MES version <code>--DevTasksVersion &lt;DevTasksVersion&gt; (REQUIRED)</code> Critical Manufacturing dev-tasks version <code>--HTMLStarterVersion &lt;HTMLStarterVersion&gt; (REQUIRED)</code> HTML Starter version <code>--yoGeneratorVersion &lt;yoGeneratorVersion&gt; (REQUIRED)</code> @criticalmanufacturing/html Yeoman generator version <code>--nugetVersion &lt;nugetVersion&gt; (REQUIRED)</code> NuGet versions to target. This is usually the MES version <code>--testScenariosNugetVersion &lt;testScenariosNugetVersion&gt; (REQUIRED)</code> Test Scenarios Nuget Version <code>--infra, --infrastructure &lt;infrastructure&gt;</code> Infrastructure JSON file [default: ] <code>--nugetRegistry &lt;nugetRegistry&gt;</code> NuGet registry that contains the MES packages <code>--npmRegistry &lt;npmRegistry&gt;</code> NPM registry that contains the MES packages <code>--ISOLocation &lt;ISOLocation&gt;</code> MES ISO file [default: ] <code>--nugetRegistryUsername &lt;nugetRegistryUsername&gt;</code> NuGet registry username <code>--nugetRegistryPassword &lt;nugetRegistryPassword&gt;</code> NuGet registry password <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/login/","title":"login","text":""},{"location":"03-explore/commands/login/#usage","title":"Usage","text":"<pre><code>cmf login [&lt;repositoryType&gt; [&lt;repository&gt;]] [command] [options]\n</code></pre> <p>Login into one or more package repositories. Persists the credentials in the <code>.cmf-auth.json</code> file and, by default, also syncs those credentials with the actual tools (npm, nuget, docker).</p>"},{"location":"03-explore/commands/login/#arguments","title":"Arguments","text":"Name Description <code>&lt;CIFS|Docker|NPM|NuGet|Portal&gt;</code> Type of repository for login (values: portal, docker, npm, nuget, cifs) <code>&lt;repository&gt;</code> URL of repository for login"},{"location":"03-explore/commands/login/#options","title":"Options","text":"Name Description <code>-T, --auth-type &lt;Basic|Bearer&gt;</code> Type of authentication type to use (only needed if the repository type supports more than one) <code>-t, --token &lt;token&gt;</code> Token used for this, used when the auth type is Bearer <code>-u, --username &lt;username&gt;</code> Account username, used when the auth type is Basic <code>-p, --password &lt;password&gt;</code> Account password, used when the auth type is Basic <code>-d, --domain &lt;domain&gt;</code> For repositories that support it, the domain to use when logging in. <code>-k, --key &lt;key&gt;</code> For repositories that support it, the key under which we should store the credential <code>--store-only</code> If true, the credentials are stored on the <code>.cmf-auth.json</code> file, but are not applied to the credentials file of the tool (NPM, NuGet, Docker, etc...) <code>--no-prompt</code> Do not display any interactive prompts. If a prompt was needed, an error will be raised instead <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/login/#commands","title":"Commands","text":"Name Description <code>sync</code> Sync credentials from the .cmf-auth.json file into each specific tool (npm, nuget, docker, etc...) configuration files."},{"location":"03-explore/commands/login/#overview","title":"Overview","text":"<p>The most common use case for this command is to run only:</p> <pre><code>cmf login\n</code></pre> <p>This will automatically authenticate into Critical Manufacturing's Customer Portal (if you are already logged into it on your browser), and also authenticate using the same credentials to the official registries (NPM, Nuget and Docker) from CM.</p> <p>There are two authentication types supported as of now: Basic (username and password) and Bearer (token).</p> Repository Type Auth Types Domain Key Portal (default) Bearer No No NPM Basic / Bearer No No NuGet Basic No Mandatory Docker Basic No No CIFS Basic Optional No <p>If no repository type is passed, the command will login into CM's Portal, as well as the connected CM repositories (NPM, NuGet and Docker).  <pre><code>cmf login\n</code></pre></p> <p>To support logging into third-party registries (that can serve external packages or serve as self-hosted proxy registries to CM's official ones), you can also use the same command, but pass it some more arguments, depending on the type of registry you want to authenticate.</p> <pre><code># NPM\ncmf login npm &lt;registry&gt; --auth-type Basic -u &lt;username&gt; -p &lt;password&gt;\n# NuGet\ncmf login nuget &lt;registry&gt; --auth-type Basic -k CMF -u &lt;username&gt; -p &lt;password&gt;\n# Docker\ncmf login docker &lt;registry&gt; --auth-type Basic -u &lt;username&gt; -p &lt;password&gt;\n# CM Portal (with a specific token)\ncmf login portal --auth-type Bearer -t &lt;token&gt;\n</code></pre> <p>Credentials Input Prompt</p> <p>You can avoid the parameters <code>-u</code>/<code>--username</code>, <code>-p</code>/<code>--password</code> and <code>-t</code>/<code>--token</code>, in which case they will be prompted interactively on the console.</p>"},{"location":"03-explore/commands/login/#environment-variables","title":"Environment Variables","text":"<p>It is also possible to override some credentials when running commands through the use of environment variables. The format of the environment variables is as follows:</p> <pre><code>&lt;repoType&gt;__&lt;repoUrl&gt;__&lt;property&gt;\n</code></pre> Token Description <code>repoType</code> Can be <code>npm</code> or <code>cifs</code> <code>repoUrl</code> The URL of the repository that this credential applies to. Must follow the encoding rules specified below. Examples: <ul><li>NPM <code>https://criticalmanufacturing.io/repository/npm/</code> =&gt; <code>criticalmanufacturing_io_repository_npm</code></li><li>CIFS <code>\\\\hostname\\share\\sub\\folder</code> =&gt; <code>hostname_share</code></li></ul> <code>property</code> Can be <code>AUTHTYPE</code> (mandatory), <code>USERNAME</code>, <code>PASSWORD</code>, <code>TOKEN</code>, <code>KEY</code> and <code>DOMAIN</code>. <p>Usage with External Tools</p> <p>Credentials specified through environment variables are only used by <code>cmf</code> commands that interact directly with CIFS and NPM repositories.</p> <p>On the other hand, credentials supplied through <code>cmf login</code> will work fine even if you execute</p>"},{"location":"03-explore/commands/login/#repository-url-encoding-rules","title":"Repository URL Encoding Rules","text":"<p>When specifying a Repository URL in an environment variable to override its credentials, the URl must be encoded following these rules:</p> <ul> <li>The initial protocol should be removed (ex <code>https://</code>)</li> <li>The final <code>/</code> must be removed </li> <li>Any other occurrences of one of the following characters <code>- . /</code> must be replaced with an underscore <code>_</code>.</li> <li>For CIFS shares, should include only the host name and the share name (first path segment).</li> </ul>"},{"location":"03-explore/commands/login/#cmf-auth-file","title":"Cmf Auth File","text":"<p>The credentials are stored on the auth file, with the following structure:</p> .cmf-auth.json<pre><code>{\n  \"repositories\": {\n    \"&lt;repository-type&gt;\": { //can be: portal, nuget, npm, docker, cifs\n      \"credentials\": [\n        {\n          \"authType\": \"\", // \"Bearer\" or \"Basic\"\n          \"repository\": \"\", // Url or the repository\n          \"key\": \"\", // optional (depending on repository type)\n          \"token\": \"...\", // if auth type == \"Bearer\"\n          \"username\": \"...\", // if auth type == \"Basic\"\n          \"password\": \"...\", // if auth type == \"Basic\"\n          \"domain\": \"\", // if auth type == \"Basic\", and optional (depending on repository type)\n        },\n        // ...\n      ]\n    }\n  }\n}\n</code></pre> <p>By default, the <code>.cmf-auth.json</code> is located inside the <code>$HOME</code> folder of the user running the command. It is however, possible to change the location used the <code>cmf</code> tool by setting an environment variable: <pre><code>cmf_cli_authfile=/custom/path/to/.cmf-auth.json\n</code></pre></p>"},{"location":"03-explore/commands/login_sync/","title":"login sync","text":""},{"location":"03-explore/commands/login_sync/#usage","title":"Usage","text":"<pre><code>cmf login [&lt;repositoryType&gt; [&lt;repository&gt;]] sync [options]\n</code></pre> <p>Sync credentials from the <code>.cmf-auth.json</code> file into each specific tool (npm, nuget, docker, etc...) configuration files. Useful mostly in situations where the login command was performed on a different machine or the creation of the auth file was performed manually.</p>"},{"location":"03-explore/commands/login_sync/#arguments","title":"Arguments","text":"Name Description <code>&lt;CIFS|Docker|NPM|NuGet|Portal&gt;</code> Type of repository for login (values: portal, docker, npm, nuget, cifs) <code>&lt;repository&gt;</code> URL of repository for login"},{"location":"03-explore/commands/login_sync/#options","title":"Options","text":"Name Description <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/login_sync/#overview","title":"Overview","text":"<p>This command reads the authentication from the <code>.cmf-auth.json</code>, and syncs it into NPM, Docker, NuGet.</p> <p>By default, the command also checks if the official CM Portal token is missing, is expired or is expiring soon (with a 5 days threshold), and if so, it will perform the login (equivalent to running <code>cmf login --store-only</code>). </p> <p>Note</p> <p>Although not normally recommended, this step can be disabled through an environment variable: <pre><code>cmf_cli_disable_portal_token_renew=1\n</code></pre></p> <p>The command also syncs the credentials based on their repository types. Syncing is the operation of logging into the repository using the official tools. Depending on the repository type, it has two methods to perform the sync, either writing directly to a file used by the tool, or running a command from the tool and letting it handle the rest.</p> Repository Type Method Details Portal File <code>{ApplicationData}/cmfportal/cmfportaltoken</code> NPM File <code>{Home}/.npmrc</code> NuGet File Windows <code>{ApplicationData}/NuGet/NuGet.config</code>Linux <code>{HOME}/.nuget/NuGet/NuGet.config</code> Docker Command <code>docker login &lt;repoUrl&gt; -u &lt;username&gt; -p &lt;password&gt;</code> CIFS N/A CIFS authentication is only used internally by the cmf cli itself and thus needs no synchronization"},{"location":"03-explore/commands/ls/","title":"ls","text":""},{"location":"03-explore/commands/ls/#usage","title":"Usage","text":"<pre><code>cmf ls [options] [&lt;workingDir&gt;]\n</code></pre>"},{"location":"03-explore/commands/ls/#arguments","title":"Arguments","text":"Name Description <code>&lt;workingDir&gt;</code> Working Directory [default: .]"},{"location":"03-explore/commands/ls/#options","title":"Options","text":"Name Description <code>-r, --repo, --repos &lt;repos&gt;</code> Repositories where dependencies are located (folder) <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/new/","title":"new","text":""},{"location":"03-explore/commands/new/#usage","title":"Usage","text":"<pre><code>cmf new [options] [command]\n</code></pre>"},{"location":"03-explore/commands/new/#options","title":"Options","text":"Name Description <code>--reset</code> Reset template engine. Use this if after an upgrade the templates are not working correctly. <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/new/#commands","title":"Commands","text":"Name Description <code>business &lt;workingDir&gt;</code> [default: ] <code>database &lt;workingDir&gt;</code> [default: ] <code>data &lt;workingDir&gt;</code> [default: ] <code>feature &lt;packageName&gt; &lt;workingDir&gt;</code> [default: ] <code>help &lt;workingDir&gt;</code> [default: ] <code>html &lt;workingDir&gt;</code> [default: ] <code>iot &lt;workingDir&gt;</code> [default: ] <code>securityPortal &lt;workingDir&gt;</code> [default: ] <code>test</code>"},{"location":"03-explore/commands/new_business/","title":"new business","text":""},{"location":"03-explore/commands/new_business/#usage","title":"Usage","text":"<pre><code>cmf new business [options] [&lt;workingDir&gt;]\n</code></pre>"},{"location":"03-explore/commands/new_business/#arguments","title":"Arguments","text":"Name Description <code>&lt;workingDir&gt;</code> Working Directory [default: ]"},{"location":"03-explore/commands/new_business/#options","title":"Options","text":"Name Description <code>--version &lt;version&gt;</code> Package Version [default: 1.0.0] <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/new_data/","title":"new data","text":""},{"location":"03-explore/commands/new_data/#usage","title":"Usage","text":"<pre><code>cmf new data [options] [&lt;workingDir&gt;]\n</code></pre>"},{"location":"03-explore/commands/new_data/#arguments","title":"Arguments","text":"Name Description <code>&lt;workingDir&gt;</code> Working Directory [default: ]"},{"location":"03-explore/commands/new_data/#options","title":"Options","text":"Name Description <code>--version &lt;version&gt;</code> Package Version [default: 1.0.0] <code>--businessPackage &lt;businessPackage&gt;</code> Business package where the Process Rules project should be built [default: ] <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/new_database/","title":"new database","text":""},{"location":"03-explore/commands/new_database/#usage","title":"Usage","text":"<pre><code>cmf new database [options] [&lt;workingDir&gt;]\n</code></pre>"},{"location":"03-explore/commands/new_database/#arguments","title":"Arguments","text":"Name Description <code>&lt;workingDir&gt;</code> Working Directory [default: ]"},{"location":"03-explore/commands/new_database/#options","title":"Options","text":"Name Description <code>--version &lt;version&gt;</code> Package Version [default: 1.0.0] <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/new_feature/","title":"new feature","text":""},{"location":"03-explore/commands/new_feature/#usage","title":"Usage","text":"<pre><code>cmf new feature [options] &lt;packageName&gt; [&lt;workingDir&gt;]\n</code></pre>"},{"location":"03-explore/commands/new_feature/#arguments","title":"Arguments","text":"Name Description <code>&lt;packageName&gt;</code> The Feature package name <code>&lt;workingDir&gt;</code> Working Directory [default: ]"},{"location":"03-explore/commands/new_feature/#options","title":"Options","text":"Name Description <code>--version &lt;version&gt;</code> Package Version [default: 1.0.0] <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/new_help/","title":"new help","text":""},{"location":"03-explore/commands/new_help/#usage","title":"Usage","text":"<pre><code>cmf new help [options] [&lt;workingDir&gt;] [command]\n</code></pre>"},{"location":"03-explore/commands/new_help/#arguments","title":"Arguments","text":"Name Description <code>&lt;workingDir&gt;</code> Working Directory [default: ]"},{"location":"03-explore/commands/new_help/#options","title":"Options","text":"Name Description <code>--version &lt;version&gt;</code> Package Version [default: 1.0.0] <code>--docPkg, --documentationPackage &lt;documentationPackage&gt; (REQUIRED)</code> Path to the MES documentation package <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/new_html/","title":"new html","text":""},{"location":"03-explore/commands/new_html/#usage","title":"Usage","text":"<pre><code>cmf new html [options] [&lt;workingDir&gt;]\n</code></pre>"},{"location":"03-explore/commands/new_html/#arguments","title":"Arguments","text":"Name Description <code>&lt;workingDir&gt;</code> Working Directory [default: ]"},{"location":"03-explore/commands/new_html/#options","title":"Options","text":"Name Description <code>--version &lt;version&gt;</code> Package Version [default: 1.0.0] <code>--htmlPackage, --htmlPkg &lt;htmlPackage&gt; (REQUIRED)</code> Path to the MES Presentation HTML package <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/new_iot/","title":"new iot","text":""},{"location":"03-explore/commands/new_iot/#description","title":"Description","text":"Name Description"},{"location":"03-explore/commands/new_iot/#usage","title":"Usage","text":"<pre><code>cmf new iot [&lt;workingDir&gt;] [command] [options]\n</code></pre>"},{"location":"03-explore/commands/new_iot/#arguments","title":"Arguments","text":"Name Description <code>&lt;workingDir&gt;</code> Working Directory []"},{"location":"03-explore/commands/new_iot/#options","title":"Options","text":"Name Description <code>--version &lt;version&gt;</code> Package Version [default: 1.0.0] <code>--htmlPackageLocation &lt;htmlPackageLocation&gt;</code> Location of the HTML Package <code>--isAngularPackage</code> Customization package with angular <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/new_iot/#commands","title":"Commands","text":"Name Description <code>businessScenario &lt;workingDir&gt;</code> [] <code>converter &lt;workingDir&gt;</code> [] <code>driver &lt;workingDir&gt;</code> [] <code>task &lt;workingDir&gt;</code> [] <code>taskLibrary &lt;workingDir&gt;</code> []"},{"location":"03-explore/commands/new_iot_businessScenario/","title":"new iot businessScenario","text":""},{"location":"03-explore/commands/new_iot_businessScenario/#usage","title":"Usage","text":"<pre><code>cmf new iot businessScenario [options] [&lt;workingDir&gt;] [command]\n</code></pre> <p>This command generates a new task library (connect iot package) for business scenarios. This command should be executed inside an IoT Package generated from the cmf new iot (the iot package must not be generated as an angular package). </p>"},{"location":"03-explore/commands/new_iot_businessScenario/#arguments","title":"Arguments","text":"Name Description <code>&lt;workingDir&gt;</code> Working Directory [default: ]"},{"location":"03-explore/commands/new_iot_businessScenario/#options","title":"Options","text":"Name Description <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/new_iot_converter/","title":"new iot converter","text":""},{"location":"03-explore/commands/new_iot_converter/#usage","title":"Usage","text":"<pre><code>cmf new iot converter [options] [&lt;workingDir&gt;] [command]\n</code></pre> <p>This command generates a new connect iot converter. This command should be executed inside a task library generated from the cmf new iot taskLibrary. </p>"},{"location":"03-explore/commands/new_iot_converter/#arguments","title":"Arguments","text":"Name Description <code>&lt;workingDir&gt;</code> Working Directory [default: ]"},{"location":"03-explore/commands/new_iot_converter/#options","title":"Options","text":"Name Description <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/new_iot_driver/","title":"new iot driver","text":""},{"location":"03-explore/commands/new_iot_driver/#usage","title":"Usage","text":"<pre><code>cmf new iot driver [options] [&lt;workingDir&gt;] [command]\n</code></pre> <p>This command generates a new task library (connect iot package) for drivers. This command should be executed inside an IoT Package generated from the cmf new iot (the iot package must not be generated as an angular package). </p>"},{"location":"03-explore/commands/new_iot_driver/#arguments","title":"Arguments","text":"Name Description <code>&lt;workingDir&gt;</code> Working Directory [default: ]"},{"location":"03-explore/commands/new_iot_driver/#options","title":"Options","text":"Name Description <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/new_iot_task/","title":"new iot task","text":""},{"location":"03-explore/commands/new_iot_task/#usage","title":"Usage","text":"<pre><code>cmf new iot task [options] [&lt;workingDir&gt;] [command]\n</code></pre> <p>This command generates a new connect iot task. This command should be executed inside a task library generated from the cmf new iot taskLibrary. </p>"},{"location":"03-explore/commands/new_iot_task/#arguments","title":"Arguments","text":"Name Description <code>&lt;workingDir&gt;</code> Working Directory [default: ]"},{"location":"03-explore/commands/new_iot_task/#options","title":"Options","text":"Name Description <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/new_iot_taskLibrary/","title":"new iot taskLibrary","text":""},{"location":"03-explore/commands/new_iot_taskLibrary/#usage","title":"Usage","text":"<pre><code>cmf new iot taskLibrary [options] [&lt;workingDir&gt;] [command]\n</code></pre> <p>This command generates a new task library (connect iot package). This command should be executed inside an IoT Package generated from the cmf new iot (the iot package must not be generated as an angular package). </p>"},{"location":"03-explore/commands/new_iot_taskLibrary/#arguments","title":"Arguments","text":"Name Description <code>&lt;workingDir&gt;</code> Working Directory [default: ]"},{"location":"03-explore/commands/new_iot_taskLibrary/#options","title":"Options","text":"Name Description <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/new_test/","title":"new test","text":""},{"location":"03-explore/commands/new_test/#usage","title":"Usage","text":"<pre><code>cmf new test [options]\n</code></pre>"},{"location":"03-explore/commands/new_test/#options","title":"Options","text":"Name Description <code>--version &lt;version&gt;</code> Package Version [default: 1.0.0] <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/pack/","title":"pack","text":""},{"location":"03-explore/commands/pack/#description","title":"Description","text":"<p>cmf pack is a package creator for the CM MES developments. It puts files and folders in place so that CM Deployment Framework is able to install them.</p> <p>It is extremely configurable to support a variety of use cases. Most commonly, we use it to pack the developments of CM MES customizations.</p> <p>Run <code>cmf pack -h</code> to get a list of available arguments and options.</p>"},{"location":"03-explore/commands/pack/#important","title":"Important","text":"<p>cmf pack comes with preconfigured Steps per PackageType to run during the installation. This pre defined steps are assuming a restrict structure during the installation, this can be disabled using the flag <code>isToSetDefaultSteps:false</code> in your <code>cmfpackage.json</code>.</p>"},{"location":"03-explore/commands/pack/#how-it-works","title":"How it works","text":"<p>When the cmf pack is executed it will search in the working directory, for a <code>cmfpackage.json</code> file, that then is serialized to the CmfPackage this will guarantee that the <code>cmfpackage.json</code> has all the valid and needed fields. Then it will get which is the PackageType, and based on that will generate the package.</p>"},{"location":"03-explore/commands/pack/#usage","title":"Usage","text":"<pre><code>cmf pack [options] [&lt;workingDir&gt;]\n</code></pre>"},{"location":"03-explore/commands/pack/#arguments","title":"Arguments","text":"Name Description <code>&lt;workingDir&gt;</code> Working Directory [default: .]"},{"location":"03-explore/commands/pack/#options","title":"Options","text":"Name Description <code>-o, --outputDir &lt;outputDir&gt;</code> Output directory for created package [default: Package] <code>-f, --force</code> Overwrite all packages even if they already exists <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/commands/restore/","title":"restore","text":""},{"location":"03-explore/commands/restore/#description","title":"Description","text":"<p><code>cmf restore</code> allows fetching development dependencies from Deployment Framework (DF) packages, as an alternative to the stricter NuGet and NPM packages.</p>"},{"location":"03-explore/commands/restore/#how-it-works","title":"How it works","text":"<p>Running this command, any dependencies defined in <code>cmfpackage.json</code> will be obtained from the configured repositories (either specified via command option or registed in the <code>repositories.json</code> file) and are then unpacked to the <code>Dependencies</code> folder inside the package. Then each solution can add references/link packages from the Dependencies folder.</p>"},{"location":"03-explore/commands/restore/#usage","title":"Usage","text":"<pre><code>cmf restore [options] &lt;packagePath&gt;\n</code></pre>"},{"location":"03-explore/commands/restore/#arguments","title":"Arguments","text":"Name Description <code>&lt;packagePath&gt;</code> Package path"},{"location":"03-explore/commands/restore/#options","title":"Options","text":"Name Description <code>-r, --repo, --repos &lt;repos&gt;</code> Repositories where dependencies are located (folder) <code>-?, -h, --help</code> Show help and usage information"},{"location":"03-explore/config-files/cmfpackage.json/","title":"cmfpackage.json","text":"<p>This document is all you need to know about what's required in your cmfpackage.json file.</p>"},{"location":"03-explore/config-files/cmfpackage.json/#fields","title":"Fields","text":""},{"location":"03-explore/config-files/cmfpackage.json/#packageid","title":"packageId","text":"<p>The most important things in your cmfpackage.json are the packageId and version fields as they will be required. The packageId and version together form an identifier that is assumed to be completely unique. Changes to the package should come along with changes to the version.</p> <p>The packageId is automatically generated when the package is created via the <code>cmf new</code> and by default contains the packageType (eg: Cmf.Feature.Business).</p>"},{"location":"03-explore/config-files/cmfpackage.json/#version","title":"version","text":"<p>The most important things in your cmfpackage.json are the packageId and version fields as they will be required. The packageId and version together form an identifier that is assumed to be completely unique. Changes to the package should come along with changes to the version.</p> <p>Version must be parseable by node-semver.</p>"},{"location":"03-explore/config-files/cmfpackage.json/#description","title":"description","text":"<p>Put a description in it.  It's a string.</p>"},{"location":"03-explore/config-files/cmfpackage.json/#packagetype","title":"packageType","text":"<p>The packageType is defined via an Enum, check all the valid values here.</p>"},{"location":"03-explore/config-files/cmfpackage.json/#isinstallable","title":"isInstallable","text":"<p>Boolean value (default true). A value of true indicates that the package is prepared to be installed. This value is usually only false for packages of type Tests.</p>"},{"location":"03-explore/config-files/cmfpackage.json/#isuniqueinstall","title":"isUniqueInstall","text":"<p>Boolean value (default false). A value of true indicates that the package is only installed once per environment, a second run of this package doesn't re-install it. This value is usually only true for packages of type Data, IoTData and Database.</p>"},{"location":"03-explore/config-files/cmfpackage.json/#istosetdefaultsteps","title":"isToSetDefaultSteps","text":"<p>Boolean value (default true). A value of true indicates that a set of predefined steps (each packageType has a set of steps) will be used. This value is usually only false when some debug is needed or for some reason the default steps are not working as expected.</p>"},{"location":"03-explore/config-files/cmfpackage.json/#steps","title":"steps","text":"<p>The <code>steps</code> field is an array of steps that will be executed during the package deployment. This is by default empty, because each package type has a set of predefined steps. This field is very useful when you want to add steps to be executed after the predefined or when combined with the property <code>isToSetDefaultSteps</code> as false you can override all the predefined steps.</p> <p>Example:</p> <pre><code>{\n    \"packageId\": \"Cmf.Custom.Data\",\n    \"version\": \"1.1.0\",\n    \"description\": \"Cmf Custom Data Package\",\n    \"packageType\": \"Data\",\n    \"isInstallable\": true,\n    \"isUniqueInstall\": true,\n    \"steps\": [\n    {\n        \"type\":\"Generic\",\n        \"onExecute\":\"scriptToRun.ps1\"\n    }]\n}\n</code></pre>"},{"location":"03-explore/config-files/cmfpackage.json/#contenttopack","title":"contentToPack","text":"<p>The <code>contentToPack</code> field is an array of file patterns (source and target, check below) that describes the files and folders to be included when your package is packed. File patterns follow a similar syntax to .gitignore, but reversed: including a file, directory, or glob pattern (*, **/*, and such) will make it so that file is included in the zip when it's packed.</p> <p>Some special files and directories are also included or excluded regardless of whether they exist in the files array (see here).</p> <p>You can also provide a <code>.cmfpackageignore</code> file, which will keep files from being included.</p> <p>Properties:</p> Property Description source File pattern where the files/directories to pack are located (relative to the <code>cmfpackage.json</code>). target File pattern where the files/directories should be placed in the zip. contentType Usually used in packages of Type Data. Defined via an Enum, check all the valid values here. ignoreFiles File pattern that should point to <code>.cmfpackageignore</code> files. action Action that will occur during the packing. Defined via an Enum, check all the valid values here. <p>The properties source and target have support for token replacement of any property of the cmfpackage.</p> <p>Example:</p> <pre><code>{\n  \"packageId\": \"Cmf.Custom.Database.Post\",\n  \"version\": \"1.1.0\",\n  \"description\": \"Cmf Custom Database Post Scripts Package\",\n  \"packageType\": \"Database\",\n  \"isInstallable\": true,\n  \"isUniqueInstall\": false,\n  \"contentToPack\": [\n    {\n      \"source\": \"Online/$(version)/*\",\n      \"target\": \"Online/$(version)\"\n    }\n  ]\n}\n</code></pre> <p>This means that the contentToPack will look in to the folder <code>/Online/1.1.0</code>.</p>"},{"location":"03-explore/config-files/cmfpackage.json/#dependencies","title":"dependencies","text":"<p>Dependencies are specified in an array of a simple object that maps a packageId to a version. It can point to a local dependency (in the same repo) or to a remote dependency (in a remote repo).</p> <p>Remote dependencies depend on remote repos(currently we only support folders), these repos are defined in the file <code>repositories.json</code></p> <p>Example:</p> <pre><code>{\n    \"packageId\": \"Cmf.Custom.Data\",\n    \"version\": \"1.1.0\",\n    \"description\": \"Cmf Custom Data Package\",\n    \"packageType\": \"Data\",\n    \"isInstallable\": true,\n    \"isUniqueInstall\": true,\n    \"dependencies\": [\n    {\n      \"id\": \"Cmf.Custom.Business\",\n      \"version\": \"1.0.0\"\n    }]\n}\n</code></pre>"},{"location":"03-explore/config-files/cmfpackage.json/#relatedpackages","title":"relatedPackages","text":"<p>In some cases, you want to guarantee that a set packages are built or packed together. To do this you just need to add this property, point to the relativePath of the package and define when it should be build or packed.</p> <p>Example:</p> <pre><code>{\n    \"packageId\": \"Cmf.Custom.Data\",\n    \"version\": \"1.1.0\",\n    \"description\": \"Cmf Custom Data Package\",\n    \"packageType\": \"Data\",\n    \"isInstallable\": true,\n    \"isUniqueInstall\": true,\n    \"relatedPackages\": [\n    {\n        \"path\": \"../Cmf.Custom.Business\",\n        \"preBuild\": true,\n        \"postBuild\": false,\n        \"prePack\": false,\n        \"postPack\": false\n    }]\n}\n</code></pre>"},{"location":"03-explore/config-files/cmfpackage.json/#testpackages","title":"testPackages","text":"<p>Just like the <code>dependencies</code> property, the <code>testPackages</code> are specified in an array of a simple object that maps a packageId to a version. This is useful to link packages of type Tests, to any other packages. This allow the <code>cmf assemble</code> command to assemble it together with the relative package.</p>"},{"location":"03-explore/config-files/cmfpackage.json/#generic-type-packages","title":"Generic Type Packages","text":"<p>This type doesn't have any predefined BuildStep, Step or ContentToPack, so it will completely rely on what is defined to know how it should be built, packed and deployed. Check the above properties that are only available for this PackageType.</p>"},{"location":"03-explore/config-files/cmfpackage.json/#buildsteps","title":"buildSteps","text":"<p>Array of terminal commands (similar to package.json scripts) that will be used to build the package during the <code>cmf build</code> command execution.</p> <p>Example:</p> <pre><code>\"buildSteps\": [\n{\n    \"args\": [\"build -c Release\"],\n    \"command\": \"dotnet\",\n    \"workingDirectory\": \".\"\n}\n</code></pre>"},{"location":"03-explore/config-files/cmfpackage.json/#dfpackagetype","title":"dFPackageType","text":"<p>The dfPackageType is defined via an Enum, check all the valid values here.</p>"},{"location":"03-explore/config-files/cmfpackage.json/#targetlayer","title":"targetLayer","text":"<p>String value that should match a container layer from CM Framework. Valid values should be checked in the official documentation here.</p>"},{"location":"03-explore/config-files/cmfpackage.json/#example","title":"Example","text":"<pre><code>{\n    \"packageId\": \"Cmf.Custom.Generic.Package\",\n    \"version\": \"1.0.0\",\n    \"description\": \"Generic Package\",\n    \"packageType\": \"Generic\",\n    \"dfPackageType\": \"Business\",\n    \"targetLayer\": \"host\",\n    \"isInstallable\": true,\n    \"isUniqueInstall\": false,\n    \"buildSteps\": [\n    {\n        \"args\": [\n        \"build -c Release\"\n        ],\n        \"command\": \"dotnet\",\n        \"workingDirectory\": \".\"\n    }\n    ],\n    \"contentToPack\": [\n    {\n        \"source\": \"Release/netcoreapp3.1/*.*\",\n        \"target\": \"\"\n    }],\n    \"steps\": [\n    {\n        \"type\": \"DeployFiles\",\n        \"contentPath\": \"**/**\"\n    }]\n}\n</code></pre>"},{"location":"03-explore/config-files/cmfpackage.json/contenttype/","title":"ContentType","text":"<ul> <li>Generic (default)</li> <li>MasterData</li> <li>ProcessRulesPre</li> <li>ProcessRulesPost</li> <li>EntityTypes</li> <li>ChecklistImages</li> <li>Documents</li> <li>Maps</li> <li>AutomationWorkFlows</li> <li>ExportedObjects</li> </ul>"},{"location":"03-explore/config-files/cmfpackage.json/defaultcontenttoignore/","title":"DefaultContentToIgnore","text":""},{"location":"03-explore/config-files/cmfpackage.json/defaultcontenttoignore/#html","title":"Html","text":"<ul> <li><code>node_modules</code></li> <li><code>test</code></li> <li><code>*.ts</code></li> <li><code>node.exe</code></li> <li><code>CompileProject.ps1</code></li> <li><code>node_modules_cache.zip</code></li> </ul>"},{"location":"03-explore/config-files/cmfpackage.json/defaultcontenttoignore/#iot","title":"IoT","text":"<ul> <li><code>gulpfile.js</code></li> <li><code>package-lock.json</code></li> <li><code>package.json</code></li> <li><code>packConfig.json</code></li> <li><code>README.md</code></li> </ul>"},{"location":"03-explore/config-files/cmfpackage.json/packaction/","title":"PackAction","text":"<ul> <li>Pack (default)</li> <li> <p>Transform</p> <pre><code>Use the source content to apply a transformation to another file.\nThis currently doesn't use the Target property, as it is handler dependent.\n</code></pre> </li> <li> <p>Untar</p> <pre><code>Use the source content to apply untar the file to a target destination.\nThis currently handler dependent (IoT Package).\n</code></pre> </li> </ul>"},{"location":"03-explore/config-files/cmfpackage.json/packagetype/","title":"PackageType","text":"<ul> <li>Root</li> <li>Generic</li> <li>Business</li> <li>Data</li> <li>Grafana</li> <li>HTML</li> <li>Help</li> <li>IoT</li> <li>Reporting</li> <li>ExportedObjects</li> <li>Database</li> <li>IoTData</li> <li>Tests</li> <li>SecurityPortal</li> </ul>"},{"location":"03-explore/config-files/infrastructure.json/","title":"Infrastructure config file","text":"<p>The Infrastructure configuration file defines a set of your  Company infrastructure mandatory for the development of a CM MES Customization project.</p>"},{"location":"03-explore/config-files/infrastructure.json/#overview","title":"Overview","text":"<p>Currently, the infrastructure mandatory to do development of an MES Customization project is:</p> <ol> <li>NPM Repository - storing the NPM packages for your target MES version;</li> <li>NuGet repository - storing the NuGet packages for your target MES version.</li> </ol> <p>Note</p> <p>If you work at Critical Manufacturing, you may find our internal infrastructure configuration file on:</p> <ul> <li>Our <code>Projects</code> AzureDevops;</li> <li>Under Project: *COMMON</li> <li>Inside GIT Repository: Tools</li> <li>At the following path: <code>/Infrastructure/CMF-internal.json</code>.</li> </ul> <p>This file includes other settings not mentioned in here, but that are required by CM internal pipelines.</p>"},{"location":"03-explore/config-files/infrastructure.json/#example","title":"Example","text":"<pre><code>{\n    \"NPMRegistry\": \"http://host.example/repository/npm\",\n    \"NuGetRegistry\": \"https://host.example/repository/nuget-hosted\",\n    \"NuGetRegistryUsername\": \"user\",\n    \"NuGetRegistryPassword\": \"password\"\n}\n</code></pre>"},{"location":"03-explore/config-files/infrastructure.json/#usage","title":"Usage","text":"<p>The infrastructure file must be passed to the @criticalmanufacturing/cli <code>init</code> command as an argument. e.g.:</p> <pre><code>cmf init \"MyProject\" --infra \"my_infrastructure.json\" --config \"my_envirionment_environment.json\"\n</code></pre> <p>Warning</p> <p>Store this file on a safe location, as you may require it in the future to re-scaffold your project.</p>"},{"location":"03-explore/config-files/repositories.json/","title":"repositories.json","text":"<p>This document is all you need to know about what's required in your repositories.json file.</p>"},{"location":"03-explore/config-files/repositories.json/#settings","title":"Settings","text":""},{"location":"03-explore/config-files/repositories.json/#cirepository","title":"CIRepository","text":"<p>Path that points to a folder that contain packages that are treat as Continuous Integration packages.</p>"},{"location":"03-explore/config-files/repositories.json/#repositories","title":"Repositories","text":"<p>Array of paths that point to folders that contain package that are treat as official (i.e. upstream dependencies or already releases packages).</p>"},{"location":"03-explore/config-files/repositories.json/#example","title":"Example","text":"<p>Follows an example of <code>repositories.json</code> file.</p> <pre><code>{\n    \"CIRepository\": \"\\\\\\\\fileshare\\\\my-continuous-integration\\\\packages\\\\repository\",\n    \"Repositories\": [\n        \"\\\\\\\\fileshare\\\\my-official\\\\packages\\\\repository\",\n        \"\\\\\\\\fileshare\\\\my-released\\\\packages\\\\repository\"\n    ]\n}\n</code></pre>"},{"location":"03-explore/guides/iot-scaffolding/","title":"Guide: IoT Scaffolding","text":"<p>This guide explains how to scaffold your IoT customization project for Critical Manufacturing MES. It covers both the modern Automation Task Libraries (ATLs) and the deprecated Tasks Packages Libraries.</p>"},{"location":"03-explore/guides/iot-scaffolding/#key-concepts","title":"Key Concepts","text":"<p>Before diving into the scaffolding procedures, let's define some key concepts:</p> <ul> <li>Library: In this context, a library is the customization IoT package that user sees on the MES UI, containing a set of drivers, tasks, and converters.</li> <li>Driver: A driver implements the communication protocol required to interact with a specific IoT device or external system. It handles the low-level details of sending and receiving data.</li> <li>Custom Task: A custom task is a function or method that performs a specific action within the MES workflow. It has defined inputs and outputs and can be triggered by events or other tasks.</li> <li>Custom Converter: A custom converter transforms the output of a task into a different format or data type. This is often necessary to ensure compatibility with other systems or tasks.</li> <li>Automation Task Library (ATL): The recommended approach for MES v11 and later to create an IoT Task Library. ATLs separate UI metadata from the Node.js package. This metadata required to render tasks and converts on the MES UI, is now stored as a <code>json</code> file in the MES entity called <code>AutomationTaskLibrary</code>. This change has improved Workflow Designer experience and removed UI and IoT components inter-dependencies.</li> <li>Tasks Package Library (Deprecated): An older method for creating custom IoT logic, used in MES v7 through v10. It tightly couples the UI and the custom code, making it less flexible than ATLs.</li> </ul>"},{"location":"03-explore/guides/iot-scaffolding/#supported-iot-code-extensions","title":"Supported IoT Code Extensions","text":"<p>Critical Manufacturing IoT supports code extensions through the following:</p> <ul> <li>Libraries: Creating libraries containing objects subject to IoT extensions.</li> <li>Drivers: Implementing protocols to interact with IoT devices or unsupported external systems.</li> <li>Custom Tasks: Developing functions or methods with a name, inputs, outputs, and an action.</li> <li>Custom Converters: Developing converters to transform task outputs into different formats or types.</li> </ul>"},{"location":"03-explore/guides/iot-scaffolding/#project-structure","title":"Project Structure","text":"<p>When generating the Connect IoT customization with the <code>cmf new iot</code> command, it will generate three packages:</p> <ul> <li><code>IoT</code> - The IoT root package;</li> <li><code>IoT.Data</code> - To store master data for IoT-related MES entities (e.g. controllers, workflows, drivers, etc);</li> <li><code>IoT.Package</code> - To hold all the custom IoT components, like Tasks, Converters and Drivers.</li> </ul> <pre><code>...\n\ud83d\udce6Cmf.Custom.IoT\n\u2523 \ud83d\udcc2Cmf.Custom.IoT.Data             # Location IoT Master Data Files\n\u2503 \u2523 \ud83d\udcc2AutomationWorkFlows\n\u2503 \u2503 \u2523 \ud83d\udcc2FileHandler\n\u2503 \u2503 \u2503 \u2517 \ud83d\udcdcSetup.json\n\u2503 \u2523 \ud83d\udcc2MasterData\n\u2503 \u2503 \u2517 \ud83d\udcc21.0.0\n\u2503 \u2503 \u2503 \u2517 \ud83d\udcdcFileHandlerMasterData.json\n\u2523 \ud83d\udcc2Cmf.Custom.IoT.Packages        # Location IoT \"Tasks Package\" or ATL\n\u2503 \u2523 \ud83d\udcc2projects                             # Angular components (Tasks Packages, MES v10+)\n\u2503 \u2523 \ud83d\udcc2src                                  # Non-Angular components (ATLs, or Tasks Packages without Angular)\n\u2503 \u2523 \ud83d\udcdc.npmrc\n\u2503 \u2523 \ud83d\udcdccmfpackage.json\n\u2503 \u2523 \ud83d\udcdcpackage.json\n\u2517 \ud83d\udcdccmfpackage.json\n...\n</code></pre> <p>The <code>IoT.Data</code> package is composed of two folders:</p> <ul> <li>AutomationWorkFlows - To hold the exported JSON files that constitute the IoT automation workflows to be used in the MES.</li> <li> <p>MasterData - To hold the actual master data files with IoT entities.</p> <p>IoT Workflow Paths</p> <p>When referring to IoT Workflows on the IoT master data files, their path should be relative to the AutomationWorkFlows folder.</p> <p>e.g.: Compare the below master data paths with the previous IoT file structure example.</p> <pre><code>{\n    \"AutomationControllerWorkflow\": {\n        \"1\": {\n        \"AutomationController\": \"InterfaceController\",\n        \"Name\": \"Setup\",\n        \"DisplayName\": \"Setup\",\n        \"IsFile\": \"Yes\",\n        \"Workflow\": \"FileHandler/Setup.json\",\n        \"Order\": \"1\"\n        }\n    }\n}\n</code></pre> </li> </ul> <p>The <code>IoT.Packages</code> should be used as the workspace to create new TasksLibraries (packages that hold Connect ioT runtime components). Inside the TaskLibrary create new tasks, converters or drivers.</p> <p>Hint</p> <p>If you don't require the IoT package or any of its sub-packages, simply delete it and remove its references from the root <code>cmfpackage.json</code> file.</p> <p>Bare in mind, the following project structure variations may occur:</p> <ul> <li>The <code>Cmf.Custom.IoT.Data</code> folder might be named <code>IoTData</code>. This folder contains configuration and master data related to your IoT solution.</li> <li>The <code>Cmf.Custom.IoT.Packages</code> folder might be named <code>IoTPackages</code>. This folder contains the actual code for your custom IoT logic (drivers, tasks, converters).</li> <li>The <code>projects</code> folder is created only when generating a Tasks Package library with Angular support (MES v10 onwards). This folder contains the Angular components that provide the user interface for your custom tasks.</li> <li>The <code>src</code> folder is present when you are developing an ATL, or when you are using Tasks Packages but without Angular components. It contains the core logic of your drivers, tasks, and converters.</li> </ul>"},{"location":"03-explore/guides/iot-scaffolding/#scaffolding-procedures","title":"Scaffolding Procedures","text":"<p>The scaffolding process differs depending on the IoT library type (ATL or Tasks Package) and the MES version.</p>"},{"location":"03-explore/guides/iot-scaffolding/#automation-task-library-atl-scaffolding","title":"Automation Task Library (ATL) Scaffolding","text":""},{"location":"03-explore/guides/iot-scaffolding/#tools","title":"Tools","text":"<p><code>@criticalmanufacturing/cli</code></p>"},{"location":"03-explore/guides/iot-scaffolding/#steps","title":"Steps","text":"<ol> <li> <p>Generate the base structure:</p> <pre><code>cd {{project_or_feature_root_dir}}\ncmf new iot\n</code></pre> </li> <li> <p>Generate a custom driver (if needed):</p> <pre><code>cd {{project_or_feature_root_dir}}/Cmf.Custom.IoT/Cmf.Custom.IoT.Packages/src\ncmf new iot driver\n</code></pre> </li> <li> <p>Generate a custom Task Library (if needed):</p> <pre><code>cd {{project_or_feature_root_dir}}/Cmf.Custom.IoT/Cmf.Custom.IoT.Packages/src\ncmf new iot taskLibrary\n</code></pre> </li> <li> <p>Generate a custom Task (if needed):</p> <pre><code>cd {{project_or_feature_root_dir}}/Cmf.Custom.IoT/Cmf.Custom.IoT.Packages/src/{{library_name}}\ncmf new iot task\n</code></pre> </li> <li> <p>Generate a custom Converter (if needed):</p> <pre><code>cd {{project_or_feature_root_dir}}/Cmf.Custom.IoT/Cmf.Custom.IoT.Packages/src/{{library_name}}\ncmf new iot converter\n</code></pre> </li> <li> <p>Generating a Business Scenario (if needed):</p> <pre><code>cd {{project_or_feature_root_dir}}/Cmf.Custom.IoT/Cmf.Custom.IoT.Packages\ncmf new iot businessScenario\n</code></pre> </li> </ol>"},{"location":"03-explore/guides/iot-scaffolding/#demo","title":"Demo","text":"<p>The following images demo the scaffolding procedures for IoT ATL custom library and its components:</p> <ul> <li> <p><code>cmf new iot</code></p> <p></p> </li> <li> <p>Generating ATL Task Library</p> <p></p> </li> <li> <p>Generating a Driver</p> <p></p> </li> <li> <p>Generating a Task</p> <p></p> </li> <li> <p>Generating a Converter</p> <p></p> </li> <li> <p>Generating a Business Scenario</p> <p></p> </li> </ul>"},{"location":"03-explore/guides/iot-scaffolding/#tasks-package-scaffolding-mes-v10-or-above","title":"Tasks Package Scaffolding - MES v10 or above","text":"<p>IoT Tasks Package depends on UI</p> <p>Version v10 introduces a dependency between Connect IoT customization and the GUI when using Task Packages. The GUI requires compile-time access to the Connect IoT customization. Therefore, you must have an HTML package.</p>"},{"location":"03-explore/guides/iot-scaffolding/#tools_1","title":"Tools","text":"<p><code>@criticalmanufacturing/cli</code>, <code>@angular/cli</code>, <code>Yeoman</code></p>"},{"location":"03-explore/guides/iot-scaffolding/#steps_1","title":"Steps","text":"<ol> <li> <p>Ensure you have an existing UI/HTML package layer (below we assume it exists at <code>./Cmf.Custom.HTML</code> directory).</p> </li> <li> <p>Generate the base structure:</p> <pre><code>#Generate base structure\ncd {{project_or_feature_root_dir}}\ncmf new iot --isAngularPackage --htmlPackageLocation ./Cmf.Custom.HTML \n\n#Install library dependencies\ncd {{project_or_feature_root_dir}}/Cmf.Custom.IoT/Cmf.Custom.IoT.Packages\nnpm install\n</code></pre> </li> <li> <p>Generate a custom driver (if needed):</p> <pre><code>cd {{project_or_feature_root_dir}}/Cmf.Custom.IoT/Cmf.Custom.IoT.Packages\nnpx yo @criticalmanufacturing/iot:driver\n</code></pre> </li> <li> <p>Generate a custom Tasks Package Library (if needed):</p> <pre><code>cd {{project_or_feature_root_dir}}/Cmf.Custom.IoT/Cmf.Custom.IoT.Packages/ \nnpx @angular/cli generate library {{library_name}}\n</code></pre> </li> <li> <p>Generate a custom Task (if needed):</p> <pre><code>cd {{project_or_feature_root_dir}}/Cmf.Custom.IoT/Cmf.Custom.IoT.Packages/projects/{{library_name}}\nnpx @angular/cli generate @criticalmanufacturing/ngx-iot-schematics:task {{task_name}}\n</code></pre> </li> <li> <p>Generate a custom Converter (if needed):</p> <pre><code>cd {{project_or_feature_root_dir}}/Cmf.Custom.IoT/Cmf.Custom.IoT.Packages/projects/{{library_name}}\nnpx @angular/cli generate @criticalmanufacturing/ngx-iot-schematics:converter {{converter_name}}\n</code></pre> </li> </ol>"},{"location":"03-explore/guides/iot-scaffolding/#post-scaffolding","title":"Post-Scaffolding","text":"<p>The @criticalmanufacturing/cli will automatically add an entry to the <code>cmfpackage.json</code> of the IoT package. But the reverse relation from the HTML package layer to IoT must be set manually created:</p> <ol> <li> <p>Edit the HTML <code>cmfpackage.json</code> file and add a <code>relatedPackages</code> entry, e.g.:</p> <pre><code>    \"relatedPackages\": [\n  {\n    \"path\": \"../Cmf.Custom.Baseline.IoT/Cmf.Custom.Baseline.IoT.Packages\",\n    \"preBuild\": true,\n    \"postBuild\": false,\n    \"prePack\": false,\n    \"postPack\": false\n  }\n]\n</code></pre> </li> <li> <p>Add a dependency in the HTML package's <code>package.json</code> file, using the command:</p> <pre><code>npm install ../Cmf.Custom.IoT/Cmf.Custom.IoT.Packages\n</code></pre> <ul> <li> <p>This command will add an entry like:</p> <pre><code>\"@criticalmanufacturing/connect-iot-controller-engine-custom-tasks\": \"file:../Cmf.Custom.Baseline.IoT/Cmf.Custom.Baseline.IoT\"\n</code></pre> </li> </ul> </li> <li> <p>Finally, add code to import IoT customizations to the UI by:</p> MES v11 onwardsMES v10 <p>Editing the <code>app.config.ts</code> file and add reference to the customization components, as presented on snippet below:</p> <pre><code>import { Metadata as CustomTasks } from '@criticalmanufacturing/connect-iot-controller-engine-custom-tasks/metadata';\n\nexport const appConfig: ApplicationConfig = {\n    providers: [\n        provideRouter(routes),\n        provideServiceWorker('ngsw-loader-worker.js', {\n            enabled: !isDevMode(),\n            registrationStrategy: 'registerWhenStable:30000'\n        }),\n        provideMesUI(\n            {\n                tasks: [\n                    CustomTasks\n                ]\n            }\n        ),\n        provideMetadataRouter()\n    ]\n};\n</code></pre> <p>Editing the <code>app.module.ts</code> file and add reference to the customization mode, as presented on snippet below:</p> <pre><code>import { Metadata as CustomTasks } from '@criticalmanufacturing/connect-iot-controller-engine-custom-tasks/metadata';\nMesUIModule.forRoot({\n    tasks: [\n        CustomTasks\n    ]\n}),\n...\n</code></pre> </li> </ol>"},{"location":"03-explore/guides/iot-scaffolding/#tasks-package-scaffolding-mes-v9-or-below","title":"Tasks Package Scaffolding - MES v9 or below","text":""},{"location":"03-explore/guides/iot-scaffolding/#tools_2","title":"Tools","text":"<p><code>@criticalmanufacturing/cli</code>, <code>Yeoman</code></p>"},{"location":"03-explore/guides/iot-scaffolding/#steps_2","title":"Steps","text":"<ol> <li> <p>Ensure you have an existing UI/HTML package layer (below we assume it exists at <code>./Cmf.Custom.HTML</code> directory).</p> </li> <li> <p>Generate the base structure:</p> <pre><code>#Generate base structure\ncd {{project_or_feature_root_dir}}\ncmf new iot --htmlPackageLocation ./Cmf.Custom.HTML\n\n#Install library dependencies\ncd {{project_or_feature_root_dir}}/Cmf.Custom.IoT/IoTPackages\nnpm install\n</code></pre> </li> <li> <p>Generate a custom driver (if needed):</p> <pre><code>cd {{project_or_feature_root_dir}}/Cmf.Custom.IoT/IoTPackages/src\nnpx yo @criticalmanufacturing/iot:driver\n</code></pre> </li> <li> <p>Generate a custom Tasks Package Library (if needed):</p> <pre><code>cd {{project_or_feature_root_dir}}/Cmf.Custom.IoT/IoTPackages/src\nnpx yo @criticalmanufacturing/iot:tasksPackage\n</code></pre> </li> <li> <p>Generate a custom Task (if needed):</p> <pre><code>cd {{project_or_feature_root_dir}}/Cmf.Custom.IoT/IoTPackages/src/{{tasks_package_name}}\nnpx yo @criticalmanufacturing/iot:task\n</code></pre> </li> <li> <p>Generate a custom Converter (if needed):</p> <pre><code>cd {{project_or_feature_root_dir}}/Cmf.Custom.IoT/IoTPackages/src/{{tasks_package_name}}\nnpx yo @criticalmanufacturing/iot:converter\n</code></pre> </li> </ol>"},{"location":"03-explore/plugins/","title":"Plugins","text":"<p>The Critical Manufacturing cli is designed with a plugin system for extensibility. In the future, it will be possible to search for plugins straight from cli.</p> <p>In the meanwhile, some plugins are already in development. Here follows a non-exhaustive plugin list:</p> <ul> <li>Portal SDK - command line tools to interact with the Critical Manufacturing Customer Portal.</li> </ul>"},{"location":"03-explore/telemetry/","title":"Telemetry","text":""},{"location":"03-explore/telemetry/#telemetry-implementation","title":"Telemetry implementation","text":"<p>Basic telemetry currently only tracks the CLI startup and logs:</p> <ul> <li>CLI name and version</li> <li>latest version available in NPM</li> <li>if the CLI version is stable or testing</li> <li>if the CLI is outdated</li> </ul> <p>no identifiable information is collected in basic telemetry</p> <p>However, any user can optionally enable extended telemetry, which might help with troubleshooting. Extended telemetry includes identifiable information and as such should be used with care. This includes the basic telemetry, plus:</p> <ul> <li>for the version (startup) log, it also includes<ul> <li>current working directory</li> <li>hostname</li> <li>IP</li> <li>username</li> </ul> </li> </ul> <p>It also tracks and logs the package tree if, for any command, the tree must be computed. This includes all of the above information plus the package name, for each package in the tree.</p> <p>Enabling telemetry can be done via environment variables:</p> <ul> <li><code>cmf_cli_enable_telemetry</code> - enable basic telemetry. If this is off (the default), no telemetry will be collected, even if extended telemetry is on. To enable, set to <code>true</code> or <code>1</code>, do not set or set to <code>false</code> or <code>0</code> to disable.</li> <li><code>cmf_cli_enable_extended_telemetry</code> - enable extended telemetry. Note the above warnings regarding the impact of keeping this on. To enable, set to <code>true</code> or <code>1</code>, do not set or set to <code>false</code> or <code>0</code> to disable.</li> <li><code>cmf_cli_telemetry_enable_console_exporter</code> - also print the telemetry information to the console. This is for auditing or troubleshooting as it makes the console output extremely verbose</li> <li><code>cmf_cli_telemetry_host</code> - specify an alternate telemetry endpoint (if you're hosting your own)</li> </ul>"}]}