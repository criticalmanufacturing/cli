# CM DS Continuous Integration Release Pipeline
pool:
  name: agent_pool

# A pipeline with no CI trigger
trigger: none

# A pipeline with no PR trigger
pr: none

# Pipeline tiggered by CI-Publish
resources:
  pipelines:
  - pipeline: CIPublish
    source: CI-Builds\CI-Publish
    trigger: true

variables:
  - group: Authentication Variables
  - template: .vars/global.yml # Template reference to global variables
  - template: .vars/${{ parameters.Environment }}.yml # Template reference to environment related variables
  - name: RestoreIdentifier
    value: ORIGINAL

# Setted in runtime
parameters:
  - name: Environment
    displayName: Environment name
    type: string
    default: system_name
    values:
      - system_name
  # Stages to Run
  - name: executeAllStages
    displayName: Execute all Stages
    type: boolean
    default: true
  - name: PrepareEnvironment
    displayName: Prepare Environment
    type: boolean
    default: false
  - name: Installation
    displayName: Installation
    type: boolean
    default: false
  - name: RestorePoint
    displayName: Create Restore Point
    type: boolean
    default: false
  - name: RunTestMasterData
    displayName: Run Test MasterData
    type: boolean
    default: false
  - name: DailyBackup
    displayName: Daily Backup
    type: boolean
    default: false
  - name: RunTests
    displayName: Run Tests
    type: boolean
    default: false
  - name: ApprovalAndRetain
    displayName: Approval and Retain Pipeline
    type: boolean
    default: false
  - name: SetNewRestorePoint
    displayName: Set New Restore Point
    type: boolean
    default: false

name: Release-$(Build.BuildId)
stages:
- stage: Artifacts
  displayName: Artifacts
  jobs:
    - job: Artifacts_Job
      displayName: Download
      workspace:
        clean: all
      steps:
      - checkout: none

      # Download CD Artifacts
      - template: .tasks/download-cd-artifacts.yml

      # Install cmf-pipeline
      - template: .tasks/install-cmf-pipeline.yml

      # Copy External Package Dependencies
      - pwsh: $(Agent.TempDirectory)/node_modules/@criticalmanufacturing/cmf-pipeline/dist/win-x64/cmf-pipeline copyDependencies $(CandidatePackages)/Configurations/dependencies.json $(CandidatePackages)/Package
        displayName: Copy External Package Dependencies

      # Clean Agent Directories
      - template: .tasks/clean-agent-directories.yml

- stage: Prepare_Environment
  displayName: Prepare Environment
  condition: |
    and(
      eq(stageDependencies.Artifacts.result, 'Succeeded'),
      or(
        eq('${{ parameters.ExecuteAllStages }}', true),
        and(eq('${{ parameters.ExecuteAllStages }}', false), eq('${{ parameters.PrepareEnvironment }}', true))
      )
    )
  jobs:
    - job: RestoreEnvironment
      displayName: Restore Environment
      workspace:
        clean: all
      steps:
      - checkout: none

      # Load EnvironmentConfig and Package Info
      - template: .tasks/load-config.yml

      # Restore Environment
      - template: .tasks/vm-restore.yml
        parameters:
          EnvironmentConfigPath: $(EnvConfig.ConfigPath)
          EnvironmentConfigName: $(EnvironmentConfigName)
          BackupRestoreIdentifier: $(RestoreIdentifier)

      # Clean Agent Directories
      - template: .tasks/clean-agent-directories.yml

- stage: Installation
  displayName: Installation
  condition: |
    and(
      eq(dependencies.Artifacts.result, 'Succeeded'),
      or(
        and(eq('${{ parameters.ExecuteAllStages }}', true), eq(dependencies.Prepare_Environment.result, 'Succeeded')),
        and(eq('${{ parameters.ExecuteAllStages }}', false), eq('${{ parameters.Installation }}', true))
      )
    )
  jobs:
    - job: CustomizationInstall
      displayName: Customization Install
      workspace:
        clean: all
      steps:
      - checkout: none

      # Load EnvironmentConfig and Package Info
      - template: .tasks/load-config.yml

      # Copy and mount MES ISO
      - template: .tasks/vm-copy-and-mount-iso.yml

      # Enable MaintenanceMode
      - template: .tasks/set-maintenancemode.yml
        parameters:
          IsEnabled: true

      # Customization Installation
      - template: .tasks/vm-installation.yml

      # Disable MaintenanceMode
      - template: .tasks/set-maintenancemode.yml
        parameters:
          IsEnabled: false

      # Clean Agent Directories
      - template: .tasks/clean-agent-directories.yml

- stage: RestorePoint
  displayName: Restore Point
  condition: |
    and(
      eq(dependencies.Artifacts.result, 'Succeeded'),
      or(
        and(eq('${{ parameters.ExecuteAllStages }}', true), eq(dependencies.Installation.result, 'Succeeded')),
        and(eq('${{ parameters.ExecuteAllStages }}', false), eq('${{ parameters.RestorePoint }}', true))
      )
    )
  jobs:
    - job: RestorePoint
      displayName: Restore Point
      workspace:
        clean: all
      steps:
      - checkout: none

      # Load EnvironmentConfig and Package Info
      - template: .tasks/load-config.yml

      # Backup Environment
      - template: .tasks/vm-backup.yml
        parameters:
          EnvironmentConfigPath: $(EnvConfig.ConfigPath)
          EnvironmentConfigName: $(EnvironmentConfigName)
          BackupRestoreIdentifier: $(EnvConfig.PackageId)_$(EnvConfig.PackageVersion)

      # Clean Agent Directories
      - template: .tasks/clean-agent-directories.yml

- stage: RunTestMasterData
  displayName: Run Test Master Data
  condition: |
    and(
      eq(dependencies.Artifacts.result, 'Succeeded'),
      or(
        and(eq('${{ parameters.ExecuteAllStages }}', true), eq(dependencies.RestorePoint.result, 'Succeeded')),
        and(eq('${{ parameters.ExecuteAllStages }}', false), eq('${{ parameters.RunTestMasterData }}', true))
      )
    )
  jobs:
    - job: TestMasterDataArtifactsExists
      displayName: Artifacts Exists
      timeoutInMinutes: 720 # 12 hours
      workspace:
        clean: all
      steps:
      - checkout: none

      # Verify if Artifact exists - TestMasterData
      - pwsh: |
          $testMasterDataFilter = "$(TestMasterDataFilter)"
          if(!$testMasterDataFilter) {
            $testMasterDataFilter = "*MasterData*"
          }
          $masterDataFiles = "$(CandidatePackages)/Tests/$testMasterDataFilter.zip"
          $exists = $false

          if (Get-ChildItem -Path $masterDataFiles) {
              $exists = $true
          }
          Write-Host "##vso[task.setVariable variable=Exists;isOutput=true]$exists"

          if(!$exists) {
            throw "Artifact not exists"
          }
        displayName: Verify if Artifact exists - TestMasterData
        name: TestMasterData
        continueOnError: true

    - job: RunTestMasterData
      displayName: Run Test Master Data
      dependsOn: TestMasterDataArtifactsExists
      condition: eq(dependencies.TestMasterDataArtifactsExists.outputs['TestMasterData.Exists'], true)
      workspace:
        clean: all
      steps:
      - checkout: none

      # Load EnvironmentConfig and Package Info
      - template: .tasks/load-config.yml

      # Copy and mount MES ISO
      - template: .tasks/vm-copy-and-mount-iso.yml

      # Enable MaintenanceMode
      - template: .tasks/set-maintenancemode.yml
        parameters:
          IsEnabled: true

      # Master Data Upload
      - template: .tasks/vm-md-upload.yml

      # Disable MaintenanceMode
      - template: .tasks/set-maintenancemode.yml
        parameters:
          IsEnabled: false

- stage: DailyBackup
  displayName: Daily Backup
  condition: |
    and(
      eq(dependencies.Artifacts.result, 'Succeeded'),
      or(
        and(eq('${{ parameters.ExecuteAllStages }}', true), eq(dependencies.RunTestMasterData.result, 'Succeeded')),
        and(eq('${{ parameters.ExecuteAllStages }}', false), eq('${{ parameters.DailyBackup }}', true))
      )
    )
  jobs:
    - job: DailyBackup
      displayName: Daily Backup
      workspace:
        clean: all
      steps:
      - checkout: none

      # Load EnvironmentConfig and Package Info
      - template: .tasks/load-config.yml

      # Backup Environment
      - template: .tasks/vm-daily-backup.yml
        parameters:
          EnvironmentConfigPath: $(EnvConfig.ConfigPath)
          EnvironmentConfigName: $(EnvironmentConfigName)

      # Clean Agent Directories
      - template: .tasks/clean-agent-directories.yml

- stage: RunTests
  displayName: Run Tests
  condition: |
    and(
      eq(dependencies.Artifacts.result, 'Succeeded'),
      or(
        and(eq('${{ parameters.ExecuteAllStages }}', true), eq(dependencies.DailyBackup.result, 'Succeeded')),
        and(eq('${{ parameters.ExecuteAllStages }}', false), eq('${{ parameters.RunTests }}', true))
      )
    )
  jobs:
  - job: TestsArtifactsExists
    displayName: Artifacts Exists
    workspace:
      clean: all
    steps:
    - checkout: none

    # Verify if Artifact exists - Tests
    - pwsh: |
        $exists = $false
        $artifactPath = "$(CandidatePackages)/Tests/*.zip"
        if (Get-ChildItem -Path $artifactPath)
        {
          $exists = $true
        }
        Write-Host "##vso[task.setVariable variable=Exists;isOutput=true]$exists"

        if(!$exists) {
          throw "Artifact not exists"
        }
      displayName: Verify if Artifact exists - Tests
      name: Tests
      continueOnError: true

  - job: RunTests
    displayName: Run Tests
    dependsOn: TestsArtifactsExists
    condition: eq(dependencies.TestsArtifactsExists.outputs['Tests.Exists'], true)
    timeoutInMinutes: 720 # 12 hours
    workspace:
      clean: all
    steps:
    - checkout: none

    # Extract dlls
    - pwsh: |
        $artifactPath = "$(CandidatePackages)/Tests/*.zip"
        if (Get-ChildItem -Path $artifactPath)
        {
          Get-ChildItem $artifactPath | foreach {
            $targetDirectory = "$(Build.ArtifactStagingDirectory)/TestExecution/" + $_.BaseName
            Expand-Archive $_ -DestinationPath $targetDirectory -Force -Verbose
          }
        }
      displayName: Extract dlls

    # Copy Copy global.json to root
    - task: CopyFiles@2
      displayName: Copy global.json to root
      inputs:
        SourceFolder: $(CandidatePackages)/Configurations
        Contents: global.json
        TargetFolder: .

    # set dotnet version
    - template: .tasks/use-dotnet-version.yml

    # Run Tests - Business
    - template: .tasks/run-tests.yml
      parameters:
        TestAssembly: "**/*.Biz.dll"
        TestRunTitle: Business

    # Run Tests - GUI
    - template: .tasks/run-tests.yml
      parameters:
        TestAssembly: "**/*.GUI.dll"
        TestRunTitle: GUI

    # Run Tests - IoT
    - template: .tasks/run-tests.yml
      parameters:
        TestAssembly: "**/*.IoT.dll"
        TestRunTitle: IoT

    # Clean Agent Directories
    - template: .tasks/clean-agent-directories.yml

- stage: ApprovalAndRetain
  displayName: Approval and Retain
  condition: |
    and(
      eq(dependencies.Artifacts.result, 'Succeeded'),
      or(
        and(eq('${{ parameters.ExecuteAllStages }}', true), in(dependencies.RunTests.result, 'Succeeded', 'SucceededWithIssues')),
        and(eq('${{ parameters.ExecuteAllStages }}', false), eq('${{ parameters.ApprovalAndRetain }}', true))
      )
    )
  jobs:
  - deployment:
    timeoutInMinutes: 2880 # 48 hours
    displayName: Approval and Retain
    workspace:
      clean: all
    environment: ApprovalGate
    cancelTimeoutInMinutes: 2880 # 48 hours
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: none

          # Load EnvironmentConfig and Package Info
          - template: .tasks/load-config.yml

          # Get Date
          - pwsh: |
              $date=$(Get-Date -Format "yyyyMMdd");
              Write-Host "##vso[task.setvariable variable=date]$date"
            displayName: Get Date

          # Tag Git Source
          - task: git-tag-on-release-task@9
            displayName: Tag Git Source
            inputs:
              staticTagName: $(EnvConfig.Product.Tenant.Name)-$(date)-$(EnvConfig.PackageVersion)

          # Retain indefinitely current release
          - task: retainPipeline@3
            displayName: Retain indefinitely current release
            inputs:
              lock: true

          # Download Package Artifacts
          - task: DownloadBuildArtifacts@0
            displayName: Download Package
            inputs:
              buildType: specific
              project: $(System.TeamProject)
              pipeline: CI-Publish
              specificBuildWithTriggering: true
              buildVersionToDownload: specific
              buildId: $(resources.pipeline.CIPublish.runID)
              downloadType: single
              artifactName: Package
              downloadPath: $(ApprovedPackages)

          # Download Tests Artifacts
          - task: DownloadBuildArtifacts@0
            displayName: Download Tests
            inputs:
              buildType: specific
              project: $(System.TeamProject)
              pipeline: CI-Publish
              specificBuildWithTriggering: true
              buildVersionToDownload: specific
              buildId: $(resources.pipeline.CIPublish.runID)
              downloadType: single
              artifactName: Tests
              downloadPath: $(ApprovedPackages)

          # Clean Agent Directories
          - template: .tasks/clean-agent-directories.yml

- stage: SetNewRestorePoint
  displayName: Set New RestorePoint
  condition: |
    and(
      eq(dependencies.Artifacts.result, 'Succeeded'),
      eq(variables['SetNewRestorePoint'], true),
      or(
        and(eq('${{ parameters.ExecuteAllStages }}', true), eq(dependencies.ApprovalAndRetain.result, 'Succeeded')),
        and(eq('${{ parameters.ExecuteAllStages }}', false), eq('${{ parameters.SetNewRestorePoint }}', true))
      )
    )
  jobs:
  - job: SetNewRestorePoint
    displayName: Set New RestorePoint
    workspace:
      clean: all
    steps:
    - checkout: none

    # Load EnvironmentConfig and Package Info
    - template: .tasks/load-config.yml

    # Rename RestorePoint to $(RestoreIdentifier)
    - pwsh: |
        $BackupLocation = $(EnvConfigProduct.Database.BackupShare)

        Set-Location $BackupLocation -Verbose

        $originalKeyword = "$(RestoreIdentifier)"
        $restorePointKeyword = "$(EnvConfig.PackageId)_$(EnvConfig.PackageVersion)"
        $date = (Get-Date).ToString("yyyyMMdd")
        $oldRestorePointName = "Before-$(EnvConfig.Product.Tenant.Name)-$date-$(EnvConfig.PackageVersion)"

        $originalFolderSearch = (Get-ChildItem -Filter $originalKeyword -Directory)
        $restorePointFolder =  (Get-ChildItem -Filter $restorePointKeyword -Directory)[0]

        # Rename Original Folder if exists
        if ($originalFolderSearch)
        {
          $originalFolder =  (Get-ChildItem -Filter $originalKeyword -Directory)[0]
          Rename-Item -Path $originalFolder -NewName $oldRestorePointName -Verbose -Force
          Set-Location $oldRestorePointName -Verbose
          $oldRestorePointFiles = Get-ChildItem -Filter "*$originalKeyword*" -File -Verbose
          foreach ($oldRestorePointFile in $oldRestorePointFiles) {
              Rename-Item -Path $oldRestorePointFile -NewName ($oldRestorePointFile.Name -replace $originalKeyword, $oldRestorePointName) -Verbose
          }

          Set-Location $BackupLocation -Verbose
        }

        Copy-Item -Path $restorePointFolder $originalKeyword -Verbose -Force -Recurse

        $originalFolder =  (Get-ChildItem -Filter $originalKeyword -Directory)[0]
        Set-Location $originalFolder -Verbose
        $restorePointFiles = Get-ChildItem -Filter "*$restorePointKeyword*" -File -Verbose
        foreach ($restorePointFile in $restorePointFiles) {
            Rename-Item -Path $restorePointFile -NewName ($restorePointFile.Name -replace $restorePointKeyword, $originalKeyword) -Verbose -Force
        }

        Set-Location $BackupLocation -Verbose
      displayName: Rename RestorePoint to $(RestoreIdentifier)

    # Clean Agent Directories
    - template: .tasks/clean-agent-directories.yml
