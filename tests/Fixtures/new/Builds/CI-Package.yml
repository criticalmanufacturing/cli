# CM PI Continuous Integration Package Pipeline
pool:
  name: agent_pool

# A pipeline with no CI trigger
trigger: none

# A pipeline with no PR trigger
pr: none

parameters:
- name: PackageId
  displayName: Package
  type: string
- name: PackagePath
  displayName: Package Path
  type: string

variables:
 - template: .vars/global.yml  # Template reference to global variables
 - name: groupName
   value: 'BuiltHEADs'

workspace:
    clean: all

name: $(Build.SourceBranchName)_$(Build.DefinitionName)_${{ parameters.PackageId }}.$(Build.BuildId)
steps:
- checkout: self
  persistCredentials: true

# use Node Tool
- task: NodeTool@0
  displayName: 'Use Node ${{ variables.NodeVersion }}'
  inputs:
    versionSpec: ${{ variables.NodeVersion }}

- task: UseDotNet@2
  displayName: 'Use Repository specified .NET Core version'
  inputs:
    packageType: 'sdk'
    useGlobalJson: true


# Install cmf-cli
- task: PowerShell@2
  displayName: 'Install cmf-cli@${{ variables.CmfCliVersion }}'
  inputs:
    pwsh: true
    failOnStderr: false
    workingDirectory: $(Agent.TempDirectory)
    targetType: inline
    script: |
      npm install --no-save @criticalmanufacturing/cli@${{ variables.CmfCliVersion }} --registry ${{ variables.CmfCliRepository }}

# Cmf Build
- task: PowerShell@2
  displayName: 'Build ${{ parameters.PackageId }}'
  inputs:
    pwsh: true
    failOnStderr: true
    workingDirectory: ${{ parameters.PackagePath }}
    targetType: inline
    script: |
      $(Agent.TempDirectory)/node_modules/.bin/cmf-cli/cmf build


# Cmf Pack
- task: PowerShell@2
  displayName: 'Pack ${{ parameters.PackageId }}'
  inputs:
    pwsh: true
    failOnStderr: true
    workingDirectory: ${{ parameters.PackagePath }}
    targetType: inline
    script: |
      $(Agent.TempDirectory)/node_modules/.bin/cmf-cli/cmf pack --force --outputDir '${{ variables.CIPackages }}/$(Build.SourceBranchName)'


# set new built HEAD
- task: PowerShell@2
  displayName: 'Set Built HEAD'
  inputs:
    pwsh: true
    failOnStderr: true
    workingDirectory: ${{ parameters.PackagePath }}
    targetType: inline
    script: |
      $url = "$($env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI)$env:SYSTEM_TEAMPROJECTID/_apis/distributedtask/variablegroups/{GROUP}?api-version=5.0-preview.1"
      $headers = @{
        Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"
      }

      $vars = Invoke-RestMethod -Uri $url.Replace("{GROUP}", "") -Method Get -ContentType "application/json" -Headers $headers
      $groupName = '${{ variables.groupName }}'
      $createGroup = $false;

      $group = $vars.value | where { $_.Name -eq $groupName }
      if ($null -eq $group) {
        Write-Host "Variable group ${groupName} does not exist in project $(System.TeamProject). This will trigger CI for all found packages.";
        $group = @{
            type = "Vsts"
            name= $groupName
            variables = New-Object PSObject
        }
        $createGroup = $true
      }

      $HEAD = $(git log -n 1 --pretty=format:%H .)
      $pkgId = "${{ parameters.PackageId }}"
      $branch = "$(Build.SourceBranchName)"
      $key = "${pkgId}@${branch}"

      Write-Debug "Key: $key"

      if ([bool]($group.variables.PSobject.Properties.name -match "^$key$")) { 
        $builtHEAD = $group.variables.$key.value
        if ($builtHEAD -eq $HEAD) {
          Write-Host "Current HEAD matches last built: $builtHEAD"
        } else {
          Write-Host "Last built HEAD for ${key} was $builtHEAD. Setting to $HEAD"
          $group.variables.$key.value = $HEAD
        }
      } else {
        Write-Host "No last built HEAD found for ${key}. Setting it to $HEAD"
        $group.variables | add-member -name $key -value @{value=$HEAD} -MemberType NoteProperty
      }

      $json = $group | ConvertTo-Json
      Write-Debug $json

      if ($createGroup) {
        $pipeline = Invoke-RestMethod -Uri $url.Replace("{GROUP}", "") -Method Post -Body $json -ContentType "application/json" -Headers $headers
      } else {
        $pipeline = Invoke-RestMethod -Uri $url.Replace("{GROUP}", $group.id) -Method Put -Body $json -ContentType "application/json" -Headers $headers
      }
  name: SetBuiltHead
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    SYSTEM_TEAMFOUNDATIONCOLLECTIONURI: $(System.TeamFoundationCollectionUri)
    SYSTEM_TEAMPROJECTID: $(System.TeamProject)

# Clean up
- task: PostBuildCleanup@3
  displayName: 'Clean Agent Directories'
  condition: always()
