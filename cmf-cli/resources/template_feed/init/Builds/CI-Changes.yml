# Changed Package detection pipeline
pool:
  name: <%= $CLI_PARAM_AgentPool %>
<%
  if ($CLI_PARAM_AgentType -eq "Cloud") {
    "  vmImage: 'ubuntu-latest'"    
  }
%>

# Trigger on any change in the included branches
trigger:
  branches:
    include:
      - development

# A pipeline with no PR trigger
pr: none

variables:
- name: groupName
  value: 'BuiltHEADs'
- name: CIPipeline
  value: 'CI-Package'

steps:
- task: PowerShell@2
  displayName: "Find changes and trigger package builds"
  inputs:
    targetType: 'inline'
    script: |
      $packages = Get-ChildItem -Path .\ -Filter cmfpackage.json -Recurse -File | % {	
          $pkgJson = Get-Content $_ | ConvertFrom-Json
          @{
              id = $pkgJson.packageId
              version = $pkgJson.version
              path = $_.DirectoryName
              HEAD = $(git log -n 1 --pretty=format:%H $_.DirectoryName)
              key = "$($pkgJson.packageId)@$(Build.SourceBranchName)"
          }
      }
      $packages | % { Write-Host "Found package $($_.id)@$($_.version) at $($_.path) with current HEAD $($_.HEAD)" }
      $url = "$($env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI)$env:SYSTEM_TEAMPROJECTID/_apis/distributedtask/variablegroups/{GROUP}?api-version=5.0-preview.1"
      $headers = @{
        Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"
      }
      
      $vars = Invoke-RestMethod -Uri $url.Replace("{GROUP}", "") -Method Get -ContentType "application/json" -Headers $headers
      $groupName = '${{ variables.groupName }}'
      $createGroup = $false;

      $group = $vars.value | where { $_.Name -eq $groupName }
      if ($null -eq $group) {
        Write-Host "Variable group ${groupName} does not exist in project $(System.TeamProject). This will trigger CI for all found packages.";
        $group = @{
            type = "Vsts"
            name= $groupName
            variables = New-Object PSObject
        }
        $createGroup = $true
      } 
      
      $changes = {@()}.Invoke()
      $packages | % {
        $key = $_.key
        if ([bool]($group.variables.PSobject.Properties.name -match "^$key$")) {
            $builtHEAD = $group.variables.$key.value
            if ($builtHEAD -eq $_.HEAD) {
                Write-Host "Current HEAD matches last built: $builtHEAD"
            } else {
                Write-Host "Last built HEAD for ${key} was $builtHEAD and HEAD is now $($_.HEAD). Triggering CI Pipeline for ${key}..."
                $changes.Add($_)
            }
        } else {
            Write-Host "No last built HEAD found for ${key}. Setting it to $($_.HEAD) and triggering CI Pipeline..."
            $changes.Add($_)
            # initialize (keep this commented in production)
            # $group.variables | add-member -name $key -value @{value=$_.HEAD} -MemberType NoteProperty
        }
      }

      # initialize (keep this commented in production)
      # $json = $group | ConvertTo-Json
      # $pipeline = Invoke-RestMethod -Uri $url.Replace("{GROUP}", "") -Method Post -Body $json -ContentType "application/json" -Headers $headers

      # get pipeline
      $url = "$($env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI)$env:SYSTEM_TEAMPROJECTID/_apis/build/definitions?api-version=4.1"
      $defs = Invoke-RestMethod -Uri $url -Method Get -ContentType "application/json" -Headers $headers
      $def = $defs.value | where { $_.name -eq '${{ variables.CIPipeline }}' }

      if ($def -eq $null) {
          Write-Host "Build definition '${{ variables.CIPipeline }}' not found in project $(System.TeamProject)"
      } else {
        $triggeredBuildIds = {@()}.Invoke()
        $changes | % {
          $relPath = [IO.Path]::GetRelativePath("$(Build.SourcesDirectory)", $_.path)
          $params = @{
            "system.debug" = @{ value = "$true" }
          }
          $body = @{
            resources = @{
              repositories = @{
                self = @{
                  refName = "$(Build.SourceBranch)"
                }
              }
            }
            templateParameters = @{
              PackagePath = $relPath
              PackageId = $_.id
            }
            variables = $params
          }

          $bodyString = $body | ConvertTo-Json -Depth 10
          Write-Debug $bodyString
          Write-Host "Queueing build for pipeline '${{ variables.CIPipeline }}' for package '$($_.id)' at '$relPath'"
          $url = "$($env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI)$env:SYSTEM_TEAMPROJECTID/_apis/pipelines/$($def.id)/runs?api-version=5.1-preview.1"
          $buildresponse = Invoke-RestMethod -Method Post -ContentType "application/json" -Uri $url -Body $bodyString -Headers $headers
          # write-host $buildresponse
          $triggeredBuildIds.Add($buildresponse.id)
        }
        Write-Host "##vso[task.setvariable variable=TriggeredBuildIds]$($triggeredBuildIds -join(","))"
      }
    pwsh: true
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    SYSTEM_TEAMFOUNDATIONCOLLECTIONURI: $(System.TeamFoundationCollectionUri)
    SYSTEM_TEAMPROJECTID: $(System.TeamProject)
- task: PostBuildCleanup@3
  displayName: 'Clean Agent Directories'
  condition: always()

