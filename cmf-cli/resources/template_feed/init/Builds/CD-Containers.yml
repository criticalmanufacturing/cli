# CM DS Continuous Deployment Containers Pipeline
pool:
  name: <%= $CLI_PARAM_AgentPool %>
//#if (agentType == "Cloud")
  vmImage: 'ubuntu-latest'
//#endif

# A pipeline with no CI trigger
trigger: none

# A pipeline with no PR trigger
pr: none

# Pipeline tiggered by CI-Publish
resources:
  pipelines:
  - pipeline: CIPublish
    source: <%= $CLI_PARAM_PipelinesFolder %>\CI-Builds\CI-Publish
    trigger: true

variables:
- group: Authentication Variables
- template: .vars/global.yml # Template reference to global variables
- template: .vars/${{ parameters.Environment }}.yml # Template reference to environment related variables

# Setted in runtime
parameters:
- name: Environment
  displayName: Environment name
  type: string
  default: <%= $CLI_PARAM_EnvironmentName %>
  values:
    - <%= $CLI_PARAM_EnvironmentName %>
# Stages to Run
- name: executeAllStages
  displayName: Execute all Stages
  type: boolean
  default: true
- name: PrepareEnvironment
  displayName: Prepare Environment
  type: boolean
  default: false
- name: Installation
  displayName: Installation
  type: boolean
  default: false
- name: RestorePoint
  displayName: Create Restore Point
  type: boolean
  default: false
- name: RunTestMasterData
  displayName: Run Test MasterData
  type: boolean
  default: false
- name: DailyBackup
  displayName: Daily Backup
  type: boolean
  default: false
- name: RunTests
  displayName: Run Tests
  type: boolean
  default: false
- name: ApprovalAndRetain
  displayName: Approval and Retain Pipeline
  type: boolean
  default: false
- name: SetNewRestorePoint
  displayName: Set New Restore Point
  type: boolean
  default: false

name: Release-$(Build.BuildId)
stages:
- stage: Artifacts
  displayName: Artifacts
  jobs:
  - job: Artifacts_Job
    displayName: Download
    workspace:
      clean: all
    steps:
    - checkout: none

    # Download CD Artifacts
    - template: .tasks/download-cd-artifacts.yml

    # Install cmf-pipeline
    - template: .tasks/install-cmf-pipeline.yml

    # Copy External Package Dependencies
    - pwsh: $(Agent.TempDirectory)/node_modules/@criticalmanufacturing/cmf-pipeline/dist/win-x64/cmf-pipeline copyDependencies $(CandidatePackages)/Configurations/dependencies.json $(CandidatePackages)/Package
      displayName: Copy External Package Dependencies

    # Clean Agent Directories
    - template: .tasks/clean-agent-directories.yml

- stage: Prepare_Environment
  displayName: Prepare Environment
  condition: |
    and(
      eq(stageDependencies.Artifacts.result, 'Succeeded'),
      or(
        eq('${{ parameters.ExecuteAllStages }}', true),
        and(eq('${{ parameters.ExecuteAllStages }}', false), eq('${{ parameters.PrepareEnvironment }}', true))
      )
    )
  jobs:
  - job: DropDB_Job
    displayName: Drop Databases
    workspace:
      clean: all
    steps:
    - checkout: none

    # Load EnvironmentConfig and Package Info
    - template: .tasks/load-config.yml

    # Drop Online
    - template: .tasks/drop-db.yml
      parameters:
        DB: Online
        DBName: $(EnvConfig.SYSTEM_NAME)
        ServerName: $(EnvConfig.DATABASE_ONLINE_MSSQL_ADDRESS)

    # Drop ODS
    - template: .tasks/drop-db.yml
      parameters:
        DB: ODS
        DBName: $(EnvConfig.SYSTEM_NAME)ODS
        ServerName: $(EnvConfig.DATABASE_ODS_MSSQL_ADDRESS)

    # Drop DWH
    - template: .tasks/drop-db.yml
      parameters:
        DB: DWH
        DBName: $(EnvConfig.SYSTEM_NAME)DWH
        ServerName: $(EnvConfig.DATABASE_DWH_MSSQL_ADDRESS)

    # Copy Backup
    - task: CopyFiles@2
      displayName: Copy Backup
      inputs:
        SourceFolder: $(EnvConfig.DATABASE_NETWORK_SHARE)/Approved
        Contents: Cmf.FullBackup.*.zip
        TargetFolder: $(CandidatePackages)/Package

    # Clean Agent Directories
    - template: .tasks/clean-agent-directories.yml

- stage: Installation
  displayName: Installation
  condition: |
    and(
      eq(dependencies.Artifacts.result, 'Succeeded'),
      or(
        and(eq('${{ parameters.ExecuteAllStages }}', true), eq(dependencies.Prepare_Environment.result, 'Succeeded')),
        and(eq('${{ parameters.ExecuteAllStages }}', false), eq('${{ parameters.Installation }}', true))
      )
    )
  jobs:
  - job: Deployment
    displayName: Customization
    workspace:
      clean: all
    steps:
    - checkout: none

    # Load EnvironmentConfig and Package Info
    - template: .tasks/load-config.yml

    # Install cmf-portal
    - template: .tasks/install-cmf-portal.yml

    # Portal Login
    - template: .tasks/portal-login.yml

    # Customization Install
    - template: .tasks/portal-deploy-customization.yml

    # Clean Agent Directories
    - template: .tasks/clean-agent-directories.yml

- stage: RestorePoint
  displayName: Restore Point
  condition: |
    and(
      eq(dependencies.Artifacts.result, 'Succeeded'),
      or(
        and(eq('${{ parameters.ExecuteAllStages }}', true), eq(dependencies.Installation.result, 'Succeeded')),
        and(eq('${{ parameters.ExecuteAllStages }}', false), eq('${{ parameters.RestorePoint }}', true))
      )
    )
  jobs:
  - job: RestorePoint
    displayName: Restore Point
    workspace:
      clean: all
    steps:
    - checkout: none

    # Load EnvironmentConfig and Package Info
    - template: .tasks/load-config.yml

    # Backup
    - template: .tasks/containers-db-backup.yml
      parameters:
        DailyBackup: false

    # Clean Agent Directories
    - template: .tasks/clean-agent-directories.yml

- stage: RunTestMasterData
  displayName: Run Test Master Data
  condition: |
    and(
      eq(dependencies.Artifacts.result, 'Succeeded'),
      or(
        and(eq('${{ parameters.ExecuteAllStages }}', true), eq(dependencies.RestorePoint.result, 'Succeeded')),
        and(eq('${{ parameters.ExecuteAllStages }}', false), eq('${{ parameters.RunTestMasterData }}', true))
      )
    )
  jobs:
  - job: TestMasterDataArtifactsExists
    workspace:
      clean: all
    displayName: Artifacts Exists
    steps:
    - checkout: none

    # Verify if Artifact exists - TestMasterData
    - pwsh: |
        $testMasterDataFilter = "$(TestMasterDataFilter)"
        if(!$testMasterDataFilter) {
          $testMasterDataFilter = "*MasterData*"
        }
        $masterDataFiles = "$(CandidatePackages)/Tests/$testMasterDataFilter.zip"
        $exists = $false

        if (Get-ChildItem -Path $masterDataFiles) {
            $exists = $true
        }
        Write-Host "##vso[task.setVariable variable=Exists;isOutput=true]$exists"

        if(!$exists) {
          throw "Artifact not exists"
        }
      displayName: Verify if Artifact exists - TestMasterData
      name: TestMasterData
      continueOnError: true

  - job: RunTestMasterData
    displayName: Run Test Master Data
    dependsOn: TestMasterDataArtifactsExists
    condition: eq(dependencies.TestMasterDataArtifactsExists.outputs['TestMasterData.Exists'], true)
    workspace:
      clean: all
    steps:
    - checkout: none

    # Load EnvironmentConfig and Package Info
    - template: .tasks/load-config.yml

    # Install cmf-portal
    - template: .tasks/install-cmf-portal.yml

    # Portal Login
    - template: .tasks/portal-login.yml

    # Customization Install
    - template: .tasks/portal-deploy-masterdata.yml

    # Clean Agent Directories
    - template: .tasks/clean-agent-directories.yml

- stage: DailyBackup
  displayName: Daily Backup
  condition: |
    and(
      eq(dependencies.Artifacts.result, 'Succeeded'),
      or(
        and(eq('${{ parameters.ExecuteAllStages }}', true), eq(dependencies.RunTestMasterData.result, 'Succeeded')),
        and(eq('${{ parameters.ExecuteAllStages }}', false), eq('${{ parameters.DailyBackup }}', true))
      )
    )
  jobs:
  - job: DailyBackup
    displayName: Daily Backup
    workspace:
      clean: all
    steps:
    - checkout: none

    # Load EnvironmentConfig and Package Info
    - template: .tasks/load-config.yml

    # Backup
    - template: .tasks/containers-db-backup.yml
      parameters:
        DailyBackup: true

    # Clean Agent Directories
    - template: .tasks/clean-agent-directories.yml

- stage: RunTests
  displayName: Run Tests
  condition: |
    and(
      eq(dependencies.Artifacts.result, 'Succeeded'),
      or(
        and(eq('${{ parameters.ExecuteAllStages }}', true), eq(dependencies.DailyBackup.result, 'Succeeded')),
        and(eq('${{ parameters.ExecuteAllStages }}', false), eq('${{ parameters.RunTests }}', true))
      )
    )
  jobs:
  - job: TestsArtifactsExists
    displayName: Artifacts Exists
    workspace:
      clean: all
    steps:
      - checkout: none

      # Verify if Artifact exists - Tests
      - pwsh: |
          $exists = $false
          $artifactPath = "$(CandidatePackages)/Tests/*.zip"
          if (Get-ChildItem -Path $artifactPath)
          {
            $exists = $true
          }
          Write-Host "##vso[task.setVariable variable=Exists;isOutput=true]$exists"

          if(!$exists) {
            throw "Artifact not exists"
          }
        displayName: Verify if Artifact exists - Tests
        name: Tests
        continueOnError: true

  - job: RunTests
    displayName: Run Tests
    dependsOn: TestsArtifactsExists
    condition: eq(dependencies.TestsArtifactsExists.outputs['Tests.Exists'], true)
    timeoutInMinutes: 720 # 12 hours
    workspace:
      clean: all
    steps:
      - checkout: none

      # Extract Test Packages
      - pwsh: |
          $artifactPath = "$(CandidatePackages)/Tests/*.zip"
          if (Get-ChildItem -Path $artifactPath)
          {
            Get-ChildItem $artifactPath | foreach {
              $targetDirectory = "$(Build.ArtifactStagingDirectory)/TestExecution/" + $_.BaseName
              Expand-Archive $_ -DestinationPath $targetDirectory -Force -Verbose
            }
          }
          Copy-Item -Path "$(CandidatePackages)/Configurations/RunSettings" -Destination "$(Build.ArtifactStagingDirectory)/TestExecution/RunSettings" -Recurse -Force -Verbose
        displayName: Extract Test Packages

      # Copy Copy global.json to root
      - task: CopyFiles@2
        displayName: Copy global.json to root
        inputs:
          SourceFolder: $(CandidatePackages)/Configurations
          Contents: global.json
          TargetFolder: .

      # set dotnet version
      - template: .tasks/use-dotnet-version.yml

      # Run Tests - Business
      - template: .tasks/run-tests.yml
        parameters:
          TestAssembly: "**/*.Biz.dll"
          TestRunTitle: Business

      # Run Tests - GUI
      - template: .tasks/run-tests.yml
        parameters:
          TestAssembly: "**/*.GUI.dll"
          TestRunTitle: GUI

      # Run Tests - IoT
      - template: .tasks/run-tests.yml
        parameters:
          TestAssembly: "**/*.IoT.dll"
          TestRunTitle: IoT

      # Clean Agent Directories
      - template: .tasks/clean-agent-directories.yml

- stage: ApprovalAndRetain
  displayName: Approval and Retain
  condition: |
    and(
      eq(dependencies.Artifacts.result, 'Succeeded'),
      or(
        and(eq('${{ parameters.ExecuteAllStages }}', true), in(dependencies.RunTests.result, 'Succeeded', 'SucceededWithIssues')),
        and(eq('${{ parameters.ExecuteAllStages }}', false), eq('${{ parameters.ApprovalAndRetain }}', true))
      )
    )
  jobs:
  - deployment:
    timeoutInMinutes: 2880 # 48 hours
    displayName: Approval and Retain
    workspace:
      clean: all
    environment: ApprovalGate
    cancelTimeoutInMinutes: 2880 # 48 hours
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: none
          - download: none

          # Load EnvironmentConfig and Package Info
          - template: .tasks/load-config.yml

          # Tag, Retain and move packages to approved folder
          - template: .tasks/approve-release.yml
            parameters:
              Tenant: $(EnvConfig.TENANT_NAME)

          # Clean Agent Directories
          - template: .tasks/clean-agent-directories.yml

- stage: SetNewRestorePoint
  displayName: Set New RestorePoint
  condition: |
    and(
      eq(dependencies.Artifacts.result, 'Succeeded'),
      eq(variables['SetNewRestorePoint'], true),
      or(
        and(eq('${{ parameters.ExecuteAllStages }}', true), eq(dependencies.ApprovalAndRetain.result, 'Succeeded')),
        and(eq('${{ parameters.ExecuteAllStages }}', false), eq('${{ parameters.SetNewRestorePoint }}', true))
      )
    )
  jobs:
  - job: SetNewRestorePoint
    displayName: Set New RestorePoint
    workspace:
        clean: all
    steps:
    - checkout: none

    # Load EnvironmentConfig and Package Info
    - template: .tasks/load-config.yml

    # Copy full backup packages to stack package path
    - pwsh:   |
        New-Item -Type Directory $(EnvConfig.DATABASE_NETWORK_SHARE)/Approved -Force -Verbose
        Copy-Item -Path $(EnvConfig.DATABASE_NETWORK_SHARE)/FullBackup/Cmf.FullBackup.*.zip -Destination $(EnvConfig.DATABASE_NETWORK_SHARE)/Approved -Verbose -Force -Recurse
        $date = (Get-Date).ToString("yyyyMMdd")
        Rename-Item FullBackup -NewName "FullBackup-$date" -Verbose
      displayName: Copy Cmf.FullBackup packages

    # Clean Agent Directories
    - template: .tasks/clean-agent-directories.yml
